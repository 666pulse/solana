// We're adding these
import * as Web3 from '@solana/web3.js';
import * as fs from 'fs';
import dotenv from 'dotenv';
dotenv.config();

async function main() {
  const connection = new Web3.Connection("http://localhost:8899", "confirmed");
  const signer = await initializeKeypair(connection);

  console.log("Public key:", signer.publicKey.toBase58());

  // When generating a keypair
  await airdropSolIfNeeded(signer, connection);

  await SystemCall(connection, signer);

  let programId = Web3.Keypair.generate();

  await createAccountWithSeed(signer.publicKey, "ibc", programId.publicKey);
}

main()
  .then(() => {
    console.log("Finished successfully")
    process.exit(0)
  })
  .catch((error) => {
    console.log(error)
    process.exit(1)
  })


async function initializeKeypair(_connection: Web3.Connection): Promise<Web3.Keypair> {
  if (!process.env.PRIVATE_KEY) {
    console.log('Generating new keypair... üóùÔ∏è');
    const signer = Web3.Keypair.generate();

    console.log('Creating .env file');
    fs.writeFileSync('.env', `PRIVATE_KEY=[${signer.secretKey.toString()}]`);

    return signer;
  }

  const secret = JSON.parse(process.env.PRIVATE_KEY ?? '') as number[];
  const secretKey = Uint8Array.from(secret);
  const keypairFromSecret = Web3.Keypair.fromSecretKey(secretKey);
  return keypairFromSecret;
}

async function airdropSolIfNeeded(
  signer: Web3.Keypair,
  connection: Web3.Connection
) {
  const balance = await connection.getBalance(signer.publicKey);
  console.log('Current balance is', balance / Web3.LAMPORTS_PER_SOL, 'SOL');

  // 1 SOL should be enough for almost anything you wanna do
  if (balance / Web3.LAMPORTS_PER_SOL < 1) {
    // You can only get up to 2 SOL per request
    console.log('Airdropping 1 SOL');
    const airdropSignature = await connection.requestAirdrop(
      signer.publicKey,
      Web3.LAMPORTS_PER_SOL
    );

    const latestBlockhash = await connection.getLatestBlockhash();

    await connection.confirmTransaction({
      blockhash: latestBlockhash.blockhash,
      lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
      signature: airdropSignature,
    });

    const newBalance = await connection.getBalance(signer.publicKey);
    console.log('New balance is', newBalance / Web3.LAMPORTS_PER_SOL, 'SOL');
  }
}

async function SystemCall(connection: Web3.Connection, payer: Web3.Keypair) {
  // Âú®Solana‰∏≠ÔºåspaceÂèòÈáèÊòØÁî®Êù•ÂÆö‰πâÊñ∞ÂàõÂª∫Ë¥¶Êà∑‰∏≠ÊâÄÈúÄÂ≠òÂÇ®Á©∫Èó¥ÁöÑÂ§ßÂ∞è„ÄÇ
  // Ëøô‰∏™ÂÄºÂ∫îËØ•Ê†πÊçÆÊÇ®ÊâìÁÆóÂ≠òÂÇ®Âú®Ë¥¶Êà∑‰∏≠ÁöÑÊï∞ÊçÆÈáèÊù•ËÆæÁΩÆ„ÄÇÂ¶ÇÊûúÊÇ®Ê≠£Âú®‰∏éÁâπÂÆöÁöÑÊô∫ËÉΩÂêàÁ∫¶ÊàñÁ®ãÂ∫èËøõË°å‰∫§‰∫íÔºå
  // ÊÇ®ÂèØËÉΩÈúÄË¶ÅÊ†πÊçÆËØ•Á®ãÂ∫èÁöÑÊñáÊ°£Êàñ‰ª£Á†ÅÊù•Á°ÆÂÆöÂêàÈÄÇÁöÑÁ©∫Èó¥Â§ßÂ∞è„ÄÇ
  //
  // ËÆæÁΩÆÂ≠òÂÇ®Á©∫Èó¥ÔºöspaceÂèòÈáèÂÆö‰πâ‰∫ÜÊñ∞ÂàõÂª∫ÁöÑSolanaË¥¶Êà∑ÊâÄÈúÄÁöÑÂ≠òÂÇ®Á©∫Èó¥Â§ßÂ∞è„ÄÇÂú®Ê≠§‰æã‰∏≠ÔºåÂÆÉË¢´ËÆæÁΩÆ‰∏∫80Â≠óËäÇÔºà10‰∏™u64Â≠óÊÆµÔºåÊØè‰∏™Â≠óÊÆµ8Â≠óËäÇÔºâ„ÄÇ
  const space = 10 * 8; // 10‰∏™u64Â≠óÊÆµÔºåÊØè‰∏™Â≠óÊÆµ8Â≠óËäÇ
  //
  // Â¶Ç‰ΩïËÆ°ÁÆóË¥¶Êà∑Ë¥πÁî®
  // Âú®Solana‰∏ä‰øùÊåÅË¥¶Êà∑Ê¥ªË∑É‰ºö‰∫ßÁîü‰∏ÄÈ°πÂ≠òÂÇ®Ë¥πÁî®ÔºåÁß∞‰∏∫ ÁßüÈáë/rent„ÄÇ
  // ÈÄöËøáÂ≠òÂÖ•Ëá≥Â∞ë‰∏§Âπ¥ÁßüÈáëÁöÑÈáëÈ¢ùÔºå‰Ω†ÂèØ‰ª•‰ΩøË¥¶Êà∑ÂÆåÂÖ®ÂÖçÈô§ÁßüÈáëÊî∂Âèñ„ÄÇÂØπ‰∫éË¥πÁî®ÁöÑËÆ°ÁÆóÔºå‰Ω†ÈúÄË¶ÅËÄÉËôë‰Ω†ÊâìÁÆóÂú®Ë¥¶Êà∑‰∏≠Â≠òÂÇ®ÁöÑÊï∞ÊçÆÈáè„ÄÇ
  //
  // Ëé∑ÂèñÁßüÈáëË±ÅÂÖçÈáëÈ¢ùÔºöÈÄöËøáË∞ÉÁî®connection.getMinimumBalanceForRentExemption(space)Ôºå
  // ËÆ°ÁÆó‰∫ÜÊñ∞Ë¥¶Êà∑ÊâÄÈúÄÁöÑÁßüÈáëË±ÅÂÖçÈáëÈ¢ù„ÄÇÂ¶ÇÊûúË¥¶Êà∑ÊåÅÊúâÁöÑ‰ΩôÈ¢ùËá≥Â∞ë‰∏∫Ê≠§ÈáëÈ¢ùÔºåËØ•Ë¥¶Êà∑Â∞ÜË¢´ËßÜ‰∏∫ÁßüÈáëË±ÅÂÖçÔºå‰ªéËÄåÂÖçÈô§‰∫ÜÂ≠òÂÇ®Ë¥πÁî®„ÄÇ
  const rentExemptionAmount = await connection.getMinimumBalanceForRentExemption(space);
  // ÁîüÊàêÊñ∞ÁöÑÂØÜÈí•ÂØπÔºöÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÂØÜÈí•ÂØπnewAccountPubkeyÔºå‰ª£Ë°®Êñ∞ÁöÑË¥¶Êà∑ÁöÑÂÖ¨Èí•ÂíåÁßÅÈí•„ÄÇ
  const newAccountPubkey = Web3.Keypair.generate();
  const fromPubkey = payer;

  // ÁΩÆÂàõÂª∫Ë¥¶Êà∑ÁöÑÂèÇÊï∞ÔºöÂÆö‰πâ‰∫Ü‰∏Ä‰∏™Âêç‰∏∫createAccountParamsÁöÑÂØπË±°ÔºåÂÖ∂‰∏≠ÂåÖÂê´ÂàõÂª∫Êñ∞Ë¥¶Êà∑ÊâÄÈúÄÁöÑÊâÄÊúâÂèÇÊï∞Ôºå
  // ‰æãÂ¶ÇÂèë‰ª∂‰∫∫ÂÖ¨Èí•„ÄÅÊñ∞Ë¥¶Êà∑ÂÖ¨Èí•„ÄÅË±ÅÂÖçÁßüÈáëÁöÑlamportsÊï∞Èáè„ÄÅÂ≠òÂÇ®Á©∫Èó¥Â§ßÂ∞è‰ª•ÂèäÂÖ≥ËÅîÁöÑÁ≥ªÁªüÁ®ãÂ∫èID„ÄÇ
  const createAccountParams = {
    fromPubkey: fromPubkey.publicKey,
    newAccountPubkey: newAccountPubkey.publicKey,
    lamports: rentExemptionAmount,
    space,
    programId: Web3.SystemProgram.programId,
  };

  // ÂàõÂª∫ÂíåÊ∑ªÂä†‰∫ãÂä°ÔºöÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ‰∫ãÂä°ÂØπË±°ÔºåÂπ∂ÈÄöËøáaddÊñπÊ≥ïÊ∑ªÂä†‰∏Ä‰∏™ÂàõÂª∫Êñ∞Ë¥¶Êà∑ÁöÑÊåá‰ª§„ÄÇ
  const createAccountTransaction = new Web3.Transaction().add(
    Web3.SystemProgram.createAccount(createAccountParams)
  );

  // ÂèëÈÄÅÂπ∂Á°ÆËÆ§‰∫ãÂä°Ôºö‰ΩøÁî®Web3.sendAndConfirmTransactionÂáΩÊï∞ÂèëÈÄÅÂπ∂Á°ÆËÆ§‰∫ãÂä°„ÄÇ
  // ËØ•ÂáΩÊï∞Êé•ÂèóËøûÊé•ÂØπË±°„ÄÅ‰∫ãÂä°ÂØπË±°‰ª•ÂèäÂåÖÊã¨‰ªòÊ¨æËÄÖÂíåÊñ∞Ë¥¶Êà∑ÂØÜÈí•ÂØπÂú®ÂÜÖÁöÑÁ≠æÂêçËÄÖÊï∞ÁªÑ„ÄÇ
  await Web3.sendAndConfirmTransaction(connection, createAccountTransaction, [
    fromPubkey,
    newAccountPubkey,
  ]);

  // Êó•ÂøóËæìÂá∫ÔºöÊúÄÂêéÔºåËØ•ÂáΩÊï∞‰ΩøÁî®console.logÊâìÂç∞‰∏ÄÊù°Ê∂àÊÅØÔºåÂÖ∂‰∏≠ÂåÖÂê´Êñ∞ÂàõÂª∫ÁöÑË¥¶Êà∑ÁöÑÈìæÊé•ÔºåÂèØ‰ª•Âú®SolanaÁöÑÂå∫ÂùóÈìæÊµèËßàÂô®‰∏äÊü•Áúã„ÄÇ
  console.log(
    `Account created: https://explorer.solana.com/address/${newAccountPubkey.publicKey.toString()}`
  );
}


async function createAccountWithSeed(basePubkey: Web3.PublicKey, seed: string, programId: Web3.PublicKey) {
  let account = await Web3.PublicKey.createWithSeed(basePubkey, seed, programId);
  console.log("Create with seed account is ", account.toString());
}
