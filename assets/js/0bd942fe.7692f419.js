"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9502],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=p(t),d=a,g=s["".concat(l,".").concat(d)]||s[d]||m[d]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[s]="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:135,sidebar_label:"Solana Program \u57fa\u7840\u6982\u5ff5",sidebar_class_name:"green"},i="Solana Program \u57fa\u7840\u6982\u5ff5",c={unversionedId:"Solana-Bootcamp-zh/week5/solana-program-struct",id:"Solana-Bootcamp-zh/week5/solana-program-struct",title:"Solana Program \u57fa\u7840\u6982\u5ff5",description:"Solana Program\u7ed3\u6784",source:"@site/docs/Solana-Bootcamp-zh/week5/solana-program-struct.md",sourceDirName:"Solana-Bootcamp-zh/week5",slug:"/Solana-Bootcamp-zh/week5/solana-program-struct",permalink:"/all-in-one-solana/docs/Solana-Bootcamp-zh/week5/solana-program-struct",draft:!1,editUrl:"https://github.com/CreatorsDAO/all-in-one-solana/edit/main/docs/Solana-Bootcamp-zh/week5/solana-program-struct.md",tags:[],version:"current",sidebarPosition:135,frontMatter:{sidebar_position:135,sidebar_label:"Solana Program \u57fa\u7840\u6982\u5ff5",sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"hello world",permalink:"/all-in-one-solana/docs/Solana-Bootcamp-zh/week5/hello-world"},next:{title:"Solana Program\u5904\u7406\u903b\u8f91",permalink:"/all-in-one-solana/docs/Solana-Bootcamp-zh/week5/solana-program-logic"}},l={},p=[{value:"Solana Program\u7ed3\u6784",id:"solana-program\u7ed3\u6784",level:2},{value:"\u5ba2\u6237\u7aef\u8bbf\u95ee",id:"\u5ba2\u6237\u7aef\u8bbf\u95ee",level:2}],u={toc:p},s="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(s,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"solana-program-\u57fa\u7840\u6982\u5ff5"},"Solana Program \u57fa\u7840\u6982\u5ff5"),(0,a.kt)("h2",{id:"solana-program\u7ed3\u6784"},"Solana Program\u7ed3\u6784"),(0,a.kt)("p",null,"\u56de\u5230\u6211\u4eec\u4e4b\u524d\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"Playground"),",\u8fd9\u6b21\u6211\u4eec\u76f4\u63a5\u7528\u5176\u7ed9\u7684\u6a21\u7248\u521b\u5efa\u9879\u76ee\u3002"),(0,a.kt)("p",null,"\u91cc\u9762\u770b\u5230",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use borsh::{BorshDeserialize, BorshSerialize};\nuse solana_program::{\n    account_info::{next_account_info, AccountInfo},\n    entrypoint,\n    entrypoint::ProgramResult,\n    msg,\n    program_error::ProgramError,\n    pubkey::Pubkey,\n};\n\n/// Define the type of state stored in accounts\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct GreetingAccount {\n    /// number of greetings\n    pub counter: u32,\n}\n\n// Declare and export the program\'s entrypoint\nentrypoint!(process_instruction);\n\n// Program entrypoint\'s implementation\npub fn process_instruction(\n    program_id: &Pubkey, // Public key of the account the hello world program was loaded into\n    accounts: &[AccountInfo], // The account to say hello to\n    _instruction_data: &[u8], // Ignored, all helloworld instructions are hellos\n) -> ProgramResult {\n    msg!("Hello World Rust program entrypoint");\n\n    // Iterating accounts is safer than indexing\n    let accounts_iter = &mut accounts.iter();\n\n    // Get the account to say hello to\n    let account = next_account_info(accounts_iter)?;\n\n    // The account must be owned by the program in order to modify its data\n    if account.owner != program_id {\n        msg!("Greeted account does not have the correct program id");\n        return Err(ProgramError::IncorrectProgramId);\n    }\n\n    // Increment and store the number of times the account has been greeted\n    let mut greeting_account = GreetingAccount::try_from_slice(&account.data.borrow())?;\n    greeting_account.counter += 1;\n    greeting_account.serialize(&mut *account.data.borrow_mut())?;\n\n    msg!("Greeted {} time(s)!", greeting_account.counter);\n\n    Ok(())\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u7684\u6574\u4f53\u7ed3\u6784\u662f\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use xxx;\n\nentrypoint!(process_instruction);\n\npub fn process_instruction(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    instruction_data: &[u8],\n) -> ProgramResult {\n    ...\n    Ok(())\n}\n")),(0,a.kt)("p",null,"\u6700\u524d\u9762\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"use")," \u662f",(0,a.kt)("inlineCode",{parentName:"p"},"rust"),"\u7684\u57fa\u672c\u8bed\u6cd5,\u5bfc\u5165\u76f8\u5173\u5b9a\u4e49\u3002"),(0,a.kt)("p",null,"\u8fd9\u91cc\u901a\u8fc7 ",(0,a.kt)("inlineCode",{parentName:"p"},"entrypoint"),' \u5b8f\u58f0\u660e\u4e86\u4e00\u4e2a\u51fd\u6570"',(0,a.kt)("inlineCode",{parentName:"p"},"process_instruction"),'"\u4e3a\u6574\u4e2a',(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u7684\u5165\u53e3\u51fd\u6570\u3002 \u5728\u524d\u9762\u7684\u8c03\u7528\u6211\u4eec\u77e5\u9053\uff0c\u8c03\u7528\u7684\u57fa\u672c\u5355\u5143\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"instruction"),",\u5176\u5b9a\u4e49\u4e3a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n* Transaction Instruction class\n*/\nexport class TransactionInstruction {\n    /**\n    * Public keys to include in this transaction\n    * Boolean represents whether this pubkey needs to sign the transaction\n    */\n    keys: Array<AccountMeta>;\n    /**\n    * Program Id to execute\n    */\n    programId: PublicKey;\n    /**\n    * Program input\n    */\n    data: Buffer;\n    constructor(opts: TransactionInstructionCtorFields);\n}\n")),(0,a.kt)("p",null,"\u8fd9\u91cc\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"programId")," \u6307\u5b9a\u4e86\u548c\u54ea\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u4ea4\u4e92\u3002\u800c\u5177\u4f53\u6267\u884c\u8fd9\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u7684\u54ea\u4e2a\u65b9\u6cd5\u5462\uff1f\u5c31\u662f\u8fd9\u91cc\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"entrypoint")," \u6765\u6307\u5b9a\u7684\u3002\u5176\u539f\u578b\u5fc5\u987b\u4e3a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn process_instruction(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    instruction_data: &[u8],\n) -> ProgramResult {\n    ...\n    Ok(())\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"program_id"),"\u5bf9\u5e94\u4e86\u8c03\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"Instruction"),"\u91cc\u9762\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"programId"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"accounts"),"\u5219\u5bf9\u5e94\u8c03\u7528\u91cc\u9762\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"keys"),"\u3002 ",(0,a.kt)("inlineCode",{parentName:"p"},"instruction_data"),"\u5219\u4e3a\u8c03\u7528\u6307\u4ee4\u91cc\u9762\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),"\u3002\u8fd9\u6837",(0,a.kt)("inlineCode",{parentName:"p"},"solana"),"\u5728\u5904\u7406\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u5c06\u8c03\u7528\u4e0e ",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u903b\u8f91\u4e00\u4e00\u5bf9\u4e0a\u4e86\u3002"),(0,a.kt)("p",null,"\u56e0\u4e3a\u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"Result"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::result::Result as ResultGeneric;\n\npub type ProgramResult = ResultGeneric<(), ProgramError>;\n")),(0,a.kt)("p",null,"\u6240\u4ee5\u6700\u540e\u8fd4\u56de\u7ed3\u679c\uff0c\u6210\u529f\u7684\u65f6\u5019\u8fd4\u56de ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok(())"),'.\u5982\u679c\u9519\u8bef\uff0c\u9700\u8981\u8fd4\u56de"',(0,a.kt)("inlineCode",{parentName:"p"},"solana::program_error::ProgramError"),'"'),(0,a.kt)("p",null,"\u83b7\u53d6",(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u5bf9\u8c61\n\u5ba2\u6237\u7aef\u901a\u8fc7",(0,a.kt)("inlineCode",{parentName:"p"},"RPC"),"\u8c03\u7528\u4f20\u9012\u8fc7\u6765\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u5bf9\u8c61\uff0c\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u91cc\u9762\u8981\u600e\u4e48\u53bb\u83b7\u53d6\u5462\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// Iterating accounts is safer than indexing\nlet accounts_iter = &mut accounts.iter();\n\n// Get the account to say hello to\nlet account = next_account_info(accounts_iter)?;\n")),(0,a.kt)("p",null,"\u56e0\u4e3a\u8fd9\u91cc\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"accounts")," \u662f\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"&[AccountInfo] AccountInfo"),"\u7684\u6570\u7ec4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 ",(0,a.kt)("inlineCode",{parentName:"p"},"iter()"),"\u6765\u5f97\u5230\u5176\u8fed\u4ee3\u5668\uff0c\u5e76\u901a\u8fc7 ",(0,a.kt)("inlineCode",{parentName:"p"},"solana_program::account_info::next_account_info")," \u89e3\u6790\u51fa ",(0,a.kt)("inlineCode",{parentName:"p"},"solana_program::AccountInfo"),"\u5bf9\u8c61\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn next_account_info<'a, 'b, I: Iterator<Item = &'a AccountInfo<'b>>>(\n    iter: &mut I,\n) -> Result<I::Item, ProgramError> {\n    iter.next().ok_or(ProgramError::NotEnoughAccountKeys)\n}\n\n\npub struct AccountInfo<'a> {\n    /// Public key of the account\n    pub key: &'a Pubkey,\n    /// The lamports in the account.  Modifiable by programs.\n    pub lamports: Rc<RefCell<&'a mut u64>>,\n    /// The data held in this account.  Modifiable by programs.\n    pub data: Rc<RefCell<&'a mut [u8]>>,\n    /// Program that owns this account\n    pub owner: &'a Pubkey,\n    /// The epoch at which this account will next owe rent\n    pub rent_epoch: Epoch,\n    /// Was the transaction signed by this account's public key?\n    pub is_signer: bool,\n    /// Is the account writable?\n    pub is_writable: bool,\n    /// This account's data contains a loaded program (and is now read-only)\n    pub executable: bool,\n}\n")),(0,a.kt)("p",null,"\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u4f20\u9012\u8fc7\u6765\u7684\u6700\u539f\u59cb\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u5bf9\u8c61\u4e86\u3002"),(0,a.kt)("p",null,"\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u4f20\u9012\u4e86\u4e00\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"owner"),"\u4e3a\u8fd9\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"account"),"\u5bf9\u8c61\uff0c\u5e76\u5728\u5176",(0,a.kt)("inlineCode",{parentName:"p"},"data"),"\u90e8\u5206\u5b58\u50a8\u4e86\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct GreetingAccount {\n    /// number of greetings\n    pub counter: u32,\n}\n")),(0,a.kt)("p",null,"\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u6570\u636e\uff0c\u4f5c\u4e3a\u8ba1\u6570\u5668\u6765\u4f7f\u7528\u3002"),(0,a.kt)("p",null,"\u6240\u4ee5\u5728\u83b7\u5f97\u8be5\u5bf9\u8c61\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c",(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u4fe1\u606f\u7684\u76f8\u5173\u68c0\u67e5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'if account.owner != program_id {\n    msg!("Greeted account does not have the correct program id");\n    return Err(ProgramError::IncorrectProgramId);\n}\n')),(0,a.kt)("p",null,"\u5982\u679c",(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u91cc\u9762\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"owner"),"\u4e0d\u662f\u6211\u4eec\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\uff0c\u76f4\u63a5\u8fd4\u56de\u51fa\u9519\u3002\u5e76\u4e14\u6307\u5b9a\u4e86\u9519\u8bef\u7801\u3002"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u6570\u636e\u5b58\u50a8\n\u4e0a\u9762\u6211\u4eec\u8bfb\u53d6\u4e86\u4f20\u9012\u7684\u5b58\u50a8\u5355\u5143",(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u7684\u57fa\u7840\u4fe1\u606f\uff0c\u90a3\u4e48\u5177\u4f53\u5b58\u50a8\u7684\u503c\u662f\u5982\u4f55\u64cd\u4f5c\u7684\u5462\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let mut greeting_account = GreetingAccount::try_from_slice(&account.data.borrow())?;\n")),(0,a.kt)("p",null,"\u8fd9\u91cc\u56e0\u4e3a\u6211\u4eec\u5728\u5b9a\u4e49",(0,a.kt)("inlineCode",{parentName:"p"},"GreetingAccount"),"\u7684\u4f7f\u7528\u4e86"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct GreetingAccount {\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Borsh"),"\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7",(0,a.kt)("inlineCode",{parentName:"p"},"try_from_slice"),"\u65b9\u6cd5\uff0c\u5c06",(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u4e2d\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"data"),"\u501f\u7528\u51fa\u6765\u505a\u89e3\u6790\u3002"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://borsh.io/"},"Borsh")," \u662f\u4e00\u4e2a\u5e8f\u5217\u5316\u6807\u51c6\uff0c\u5176\u6709\u591a\u4e2a\u8bed\u8a00\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u6211\u4eec\u8fd9\u91cc\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"Rust"),"\u548c\u5ba2\u6237\u7aef\u53ef\u4ee5\u7528 \u7684",(0,a.kt)("inlineCode",{parentName:"p"},"Javascript"),"\u3002\u5177\u4f53\u903b\u8f91\u7c7b\u4f3c\u6211\u4eec\u5728\u524d\u7aef",(0,a.kt)("inlineCode",{parentName:"p"},"web3.js"),"\u8bbf\u95ee\u65f6\u5019\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"buffer"),"\u7684\u5b9a\u4e49\u3002\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u5176\u5177\u4f53\u5b9e\u73b0\uff0c\u76f4\u63a5\u8fdb\u884c\u4f7f\u7528\u3002"),(0,a.kt)("p",null,"\u5f53\u7136\u8fd9\u91cc\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u5e8f\u5217\u5316\u5de5\u5177\uff0c\u6bd4\u5982",(0,a.kt)("inlineCode",{parentName:"p"},"Anchor"),"\u3002"),(0,a.kt)("p",null,"\u53cd\u5e8f\u5217\u5316\u8fd9\u91cc\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"data"),"\u90e8\u5206\u540e\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"GreetingAccount"),"\u5bf9\u8c61\u4e86\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"greeting_account.counter += 1;\ngreeting_account.serialize(&mut *account.data.borrow_mut())?;\n")),(0,a.kt)("p",null,"\u8fd9\u91cc\u5148\u4fee\u6539 ",(0,a.kt)("inlineCode",{parentName:"p"},"GreetingAccount"),"\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u5c06\u5176\u5e8f\u5217\u5316\u56de",(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"data"),'\u90e8\u5206\u4e2d\u3002\u5b9e\u9645\u5c31\u662f\u5c06 "',(0,a.kt)("inlineCode",{parentName:"p"},"greeting_account"),'" \u5e8f\u5217\u5316\u6210\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u7136\u540e\u518d\u586b\u5165',(0,a.kt)("inlineCode",{parentName:"p"},"account.data"),"\u90e8\u5206\u7684\u3002"),(0,a.kt)("p",null,"\u56e0\u4e3a\u6211\u4eec\u5728\u524d\u7aef\u4f20\u9012\u7684\u65f6\u5019\uff0c\u7ed9\u8fd9\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"Account"),"\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"isWritable"),"\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"\uff0c\u6240\u4ee5\u6211\u4eec",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u4e2d\u4fee\u6539\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"Account.data")," \u90e8\u5206\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"Program"),"\u6267\u884c\u7ed3\u675f\u65f6\uff0c\u5c31\u4f1a\u4fee\u6539\u94fe\u4e0a\u7684\u76f8\u5173\u6570\u636e\u3002"),(0,a.kt)("h2",{id:"\u5ba2\u6237\u7aef\u8bbf\u95ee"},"\u5ba2\u6237\u7aef\u8bbf\u95ee"),(0,a.kt)("p",null,"\u8fd9\u91cc\u8d34\u4e0a\u8bfe\u4e0a\u5ba2\u6237\u7aef\u8bbf\u95ee\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// No imports needed: web3, borsh, pg and more are globally available\n\n/**\n * The state of a greeting account managed by the hello world program\n */\nclass GreetingAccount {\n  counter = 0;\n  constructor(fields: { counter: number } | undefined = undefined) {\n    if (fields) {\n      this.counter = fields.counter;\n    }\n  }\n}\n\n/**\n * Borsh schema definition for greeting accounts\n */\nconst GreetingSchema = new Map([\n  [GreetingAccount, { kind: "struct", fields: [["counter", "u32"]] }],\n]);\n\n/**\n * The expected size of each greeting account.\n */\nconst GREETING_SIZE = borsh.serialize(\n  GreetingSchema,\n  new GreetingAccount()\n).length;\n\n// Create greetings account instruction\nconst greetingAccountKp = new web3.Keypair();\nconst lamports = await pg.connection.getMinimumBalanceForRentExemption(\n  GREETING_SIZE\n);\nconst createGreetingAccountIx = web3.SystemProgram.createAccount({\n  fromPubkey: pg.wallet.publicKey,\n  lamports,\n  newAccountPubkey: greetingAccountKp.publicKey,\n  programId: pg.PROGRAM_ID,\n  space: GREETING_SIZE,\n});\n\n// Create greet instruction\nconst greetIx = new web3.TransactionInstruction({\n  keys: [\n    {\n      pubkey: greetingAccountKp.publicKey,\n      isSigner: false,\n      isWritable: true,\n    },\n  ],\n  programId: pg.PROGRAM_ID,\n});\n\n// Create transaction and add the instructions\nconst tx = new web3.Transaction();\ntx.add(createGreetingAccountIx, greetIx);\n\n// Send and confirm the transaction\nconst txHash = await web3.sendAndConfirmTransaction(pg.connection, tx, [\n  pg.wallet.keypair,\n  greetingAccountKp,\n]);\nconsole.log(`Use \'solana confirm -v ${txHash}\' to see the logs`);\n\n// Fetch the greetings account\nconst greetingAccount = await pg.connection.getAccountInfo(\n  greetingAccountKp.publicKey\n);\n\n// Deserialize the account data\nconst deserializedAccountData = borsh.deserialize(\n  GreetingSchema,\n  GreetingAccount,\n  greetingAccount.data\n);\n\nconsole.log(\n  `deserializedAccountData.counter :${deserializedAccountData.counter}`\n);\n')))}m.isMDXComponent=!0}}]);