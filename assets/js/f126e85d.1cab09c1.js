"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2725],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},_=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),_=r,d=p["".concat(l,".").concat(_)]||p[_]||m[_]||i;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=_;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}_.displayName="MDXCreateElement"},3045:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:75,sidebar_label:"\ud83d\ude33 \u4f7f\u7528Rust\u7f16\u5199\u6d4b\u8bd5",sidebar_class_name:"green"},o="\ud83d\ude33 \u4f7f\u7528Rust\u7f16\u5199\u6d4b\u8bd5",s={unversionedId:"Solana-Co-Learn/module4/testing/writing-tests-in-rust/README",id:"Solana-Co-Learn/module4/testing/writing-tests-in-rust/README",title:"\ud83d\ude33 \u4f7f\u7528Rust\u7f16\u5199\u6d4b\u8bd5",description:"\u4e0a\u4e00\u8282\u8bfe\u90fd\u662f\u4e3a\u4e86\u51c6\u5907\u597d MINT \u8d26\u6237\u3002\u9884\u70ed\u5df2\u7ecf\u7ed3\u675f\uff0c\u73b0\u5728\u662f\u6b63\u5f0f\u8868\u6f14\u7684\u65f6\u5019\u4e86\u3002\u8ba9\u6211\u4eec\u4e3a\u6211\u4eec\u5fc3\u7231\u7684\u7535\u5f71\u8bc4\u8bba\u7a0b\u5e8f\u7f16\u5199\u6d4b\u8bd5\u5427\u3002",source:"@site/docs/Solana-Co-Learn/module4/testing/writing-tests-in-rust/README.md",sourceDirName:"Solana-Co-Learn/module4/testing/writing-tests-in-rust",slug:"/Solana-Co-Learn/module4/testing/writing-tests-in-rust/",permalink:"/all-in-one-solana/docs/Solana-Co-Learn/module4/testing/writing-tests-in-rust/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Solana-Co-Learn/module4/testing/writing-tests-in-rust/README.md",tags:[],version:"current",sidebarPosition:75,frontMatter:{sidebar_position:75,sidebar_label:"\ud83d\ude33 \u4f7f\u7528Rust\u7f16\u5199\u6d4b\u8bd5",sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"\ud83e\uddea \u6d4b\u8bd5 Solana \u7a0b\u5e8f",permalink:"/all-in-one-solana/docs/Solana-Co-Learn/module4/testing/testing-solana-programs/"},next:{title:"\u53d1\u884c\u4e00\u4e2a\u8d28\u62bc\u5e94\u7528\u7a0b\u5e8f",permalink:"/all-in-one-solana/docs/Solana-Co-Learn/module4/ship-a-staking-app/"}},l={},u=[{value:"\u521d\u59cb\u5316\u6d4b\u8bd5\u6846\u67b6",id:"\u521d\u59cb\u5316\u6d4b\u8bd5\u6846\u67b6",level:2},{value:"\u8f85\u52a9\u51fd\u6570",id:"\u8f85\u52a9\u51fd\u6570",level:2},{value:"\u521d\u59cb\u5316\u94f8\u5e01\u6d4b\u8bd5",id:"\u521d\u59cb\u5316\u94f8\u5e01\u6d4b\u8bd5",level:2},{value:"\u6dfb\u52a0\u7535\u5f71\u8bc4\u8bba\u6d4b\u8bd5",id:"\u6dfb\u52a0\u7535\u5f71\u8bc4\u8bba\u6d4b\u8bd5",level:2},{value:"\ud83d\udea2 \u8239\u8236\u6311\u6218",id:"-\u8239\u8236\u6311\u6218",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-\u4f7f\u7528rust\u7f16\u5199\u6d4b\u8bd5"},"\ud83d\ude33 \u4f7f\u7528Rust\u7f16\u5199\u6d4b\u8bd5"),(0,r.kt)("p",null,"\u4e0a\u4e00\u8282\u8bfe\u90fd\u662f\u4e3a\u4e86\u51c6\u5907\u597d MINT \u8d26\u6237\u3002\u9884\u70ed\u5df2\u7ecf\u7ed3\u675f\uff0c\u73b0\u5728\u662f\u6b63\u5f0f\u8868\u6f14\u7684\u65f6\u5019\u4e86\u3002\u8ba9\u6211\u4eec\u4e3a\u6211\u4eec\u5fc3\u7231\u7684\u7535\u5f71\u8bc4\u8bba\u7a0b\u5e8f\u7f16\u5199\u6d4b\u8bd5\u5427\u3002"),(0,r.kt)("p",null,"\u8bbe\u7f6e - \u5165\u95e8\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://github.com/buildspace/solana-movie-program/tree/solution-add-tokens"},"https://github.com/buildspace/solana-movie-program/tree/solution-add-tokens")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6dfb\u52a0\u5230 ",(0,r.kt)("inlineCode",{parentName:"li"},"Cargo.toml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dev-dependencies]\nassert_matches = "1.4.0"\nsolana-program-test = "~1.10.29"\nsolana-sdk = "~1.10.29"\n')),(0,r.kt)("h2",{id:"\u521d\u59cb\u5316\u6d4b\u8bd5\u6846\u67b6"},"\u521d\u59cb\u5316\u6d4b\u8bd5\u6846\u67b6"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6dfb\u52a0\u5230\u5e95\u90e8 ",(0,r.kt)("inlineCode",{parentName:"li"},"processor.rs"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// Inside processor.rs\n#[cfg(test)]\nmod tests {\n  use {\n    super::*,\n    assert_matches::*,\n    solana_program::{\n        instruction::{AccountMeta, Instruction},\n        system_program::ID as SYSTEM_PROGRAM_ID,\n    },\n    solana_program_test::*,\n    solana_sdk::{\n        signature::Signer,\n        transaction::Transaction,\n        sysvar::rent::ID as SYSVAR_RENT_ID\n    },\n    spl_associated_token_account::{\n        get_associated_token_address,\n        instruction::create_associated_token_account,\n    },\n    spl_token:: ID as TOKEN_PROGRAM_ID,\n  };\n}\n")),(0,r.kt)("h2",{id:"\u8f85\u52a9\u51fd\u6570"},"\u8f85\u52a9\u51fd\u6570"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u521b\u5efa\u521d\u59cb\u5316\u94f8\u5e01\u6307\u4ee4\u7684\u8f85\u52a9\u51fd\u6570"),(0,r.kt)("li",{parentName:"ul"},"\u5728\u6d4b\u8bd5\u6a21\u5757\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u51fd\u6570\uff0c\u4ee5\u4fbf\u5728\u9700\u8981\u65f6\u53ef\u4ee5\u8c03\u7528\u5b83\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// Inside the the tests modules\nfn create_init_mint_ix(payer: Pubkey, program_id: Pubkey) -> (Pubkey, Pubkey, Instruction) {\n  // Derive PDA for token mint authority\n  let (mint, _bump_seed) = Pubkey::find_program_address(&[b"token_mint"], &program_id);\n  let (mint_auth, _bump_seed) = Pubkey::find_program_address(&[b"token_auth"], &program_id);\n\n  let init_mint_ix = Instruction {\n      program_id: program_id,\n      accounts: vec![\n          AccountMeta::new_readonly(payer, true),\n          AccountMeta::new(mint, false),\n          AccountMeta::new(mint_auth, false),\n          AccountMeta::new_readonly(SYSTEM_PROGRAM_ID, false),\n          AccountMeta::new_readonly(TOKEN_PROGRAM_ID, false),\n          AccountMeta::new_readonly(SYSVAR_RENT_ID, false)\n      ],\n      data: vec![3]\n  };\n\n  (mint, mint_auth, init_mint_ix)\n}\n')),(0,r.kt)("h2",{id:"\u521d\u59cb\u5316\u94f8\u5e01\u6d4b\u8bd5"},"\u521d\u59cb\u5316\u94f8\u5e01\u6d4b\u8bd5"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6d4b\u8bd5 ",(0,r.kt)("inlineCode",{parentName:"li"},"initialize_token_mint")," \u6307\u793a"),(0,r.kt)("li",{parentName:"ul"},"\u6211\u4eec\u7684\u8f85\u52a9\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4"),(0,r.kt)("li",{parentName:"ul"},"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u89e3\u6784\u6765\u83b7\u53d6\u6211\u4eec\u9700\u8981\u7684\u503c",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"mint pubkey,"),(0,r.kt)("li",{parentName:"ul"},"mint_auth pubkey"),(0,r.kt)("li",{parentName:"ul"},"the Instruction"))),(0,r.kt)("li",{parentName:"ul"},"\u4e00\u65e6\u6307\u4ee4\u7ec4\u88c5\u5b8c\u6210\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u6dfb\u52a0\u5230 ",(0,r.kt)("inlineCode",{parentName:"li"},"Transaction")," \u4e2d\uff0c\u5e76\u4f7f\u7528\u4ece ",(0,r.kt)("inlineCode",{parentName:"li"},"ProgramTest")," \u6784\u9020\u51fd\u6570\u751f\u6210\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"banks_client")," \u6765\u5904\u7406\u5b83\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"assert_matches!")," \u5b8f\u6765\u786e\u5b9a\u6d4b\u8bd5\u662f\u5426\u901a\u8fc7")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// First unit test\n#[tokio::test]\nasync fn test_initialize_mint_instruction() {\n    let program_id = Pubkey::new_unique();\n    let (mut banks_client, payer, recent_blockhash) = ProgramTest::new(\n        "pda_local",\n        program_id,\n        processor!(process_instruction),\n    )\n    .start()\n    .await;\n\n    // Call helper function\n    let (_mint, _mint_auth, init_mint_ix) = create_init_mint_ix(payer.pubkey(), program_id);\n\n    // Create transaction object with instructions, accounts, and input data\n    let mut transaction = Transaction::new_with_payer(\n        &[init_mint_ix,],\n        Some(&payer.pubkey()),\n    );\n    transaction.sign(&[&payer], recent_blockhash);\n\n    // Process transaction and compare the result\n    assert_matches!(banks_client.process_transaction(transaction).await, Ok(_));\n}\n')),(0,r.kt)("h2",{id:"\u6dfb\u52a0\u7535\u5f71\u8bc4\u8bba\u6d4b\u8bd5"},"\u6dfb\u52a0\u7535\u5f71\u8bc4\u8bba\u6d4b\u8bd5"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6d4b\u8bd5 ",(0,r.kt)("inlineCode",{parentName:"li"},"add_movie_review")," \u6307\u4ee4\u8bbe\u7f6e")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// Second unit test\n#[tokio::test]\nasync fn test_add_movie_review_instruction() {\n  let program_id = Pubkey::new_unique();\n  let (mut banks_client, payer, recent_blockhash) = ProgramTest::new(\n      "pda_local",\n      program_id,\n      processor!(process_instruction),\n  )\n  .start()\n  .await;\n\n  // Call helper function\n  let (mint, mint_auth, init_mint_ix) = create_init_mint_ix(payer.pubkey(), program_id);\n\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5728\u7b2c\u4e8c\u6b21\u6d4b\u8bd5\u4e2d\u63a8\u5bfc\u51fa",(0,r.kt)("inlineCode",{parentName:"li"},"PDA"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"derive the review,"),(0,r.kt)("li",{parentName:"ul"},"\u8bc4\u8bba\u8ba1\u6570\u5668"),(0,r.kt)("li",{parentName:"ul"},"\u7528\u6237\u5173\u8054\u7684\u4ee4\u724c\u8d26\u6237\u5730\u5740\u3002")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// Create review PDA\nlet title: String = "Captain America".to_owned();\nconst RATING: u8 = 3;\nlet review: String = "Liked the movie".to_owned();\nlet (review_pda, _bump_seed) =\n   Pubkey::find_program_address(&[payer.pubkey().as_ref(), title.as_bytes()], &program_id);\n\n// Create comment PDA\nlet (comment_pda, _bump_seed) =\n   Pubkey::find_program_address(&[review_pda.as_ref(), b"comment"], &program_id);\n\n// Create user associate token account of token mint\nlet init_ata_ix: Instruction = create_associated_token_account(\n   &payer.pubkey(),\n   &payer.pubkey(),\n   &mint,\n);\n\nlet user_ata: Pubkey =\n   get_associated_token_address(&payer.pubkey(), &mint);\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6784\u5efa\u4ea4\u6613\uff08\u4ecd\u5728\u7b2c\u4e8c\u6b21\u6d4b\u8bd5\u4e2d\uff09")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// Concat data to single buffer\nlet mut data_vec = vec![0];\ndata_vec.append(\n    &mut (TryInto::<u32>::try_into(title.len()).unwrap().to_le_bytes())\n        .try_into()\n        .unwrap(),\n);\ndata_vec.append(&mut title.into_bytes());\ndata_vec.push(RATING);\ndata_vec.append(\n    &mut (TryInto::<u32>::try_into(review.len())\n        .unwrap()\n        .to_le_bytes())\n    .try_into()\n    .unwrap(),\n);\ndata_vec.append(&mut review.into_bytes());\n\n// Create transaction object with instructions, accounts, and input data\nlet mut transaction = Transaction::new_with_payer(\n    &[\n    init_mint_ix,\n    init_ata_ix,\n    Instruction {\n        program_id: program_id,\n        accounts: vec![\n            AccountMeta::new_readonly(payer.pubkey(), true),\n            AccountMeta::new(review_pda, false),\n            AccountMeta::new(comment_pda, false),\n            AccountMeta::new(mint, false),\n            AccountMeta::new_readonly(mint_auth, false),\n            AccountMeta::new(user_ata, false),\n            AccountMeta::new_readonly(SYSTEM_PROGRAM_ID, false),\n            AccountMeta::new_readonly(TOKEN_PROGRAM_ID, false),\n        ],\n        data: data_vec,\n    },\n    ],\n    Some(&payer.pubkey()),\n);\ntransaction.sign(&[&payer], recent_blockhash);\n\n// Process transaction and compare the result\nassert_matches!(banks_client.process_transaction(transaction).await, Ok(_));\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"cargo test-sbf")," \u8fd0\u884c\u8fd9\u4e9b\u6d4b\u8bd5")),(0,r.kt)("h2",{id:"-\u8239\u8236\u6311\u6218"},"\ud83d\udea2 \u8239\u8236\u6311\u6218"),(0,r.kt)("p",null,"\u65e2\u7136\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u5728Rust\u4e2d\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\uff0c\u90a3\u5c31\u7ee7\u7eed\u6dfb\u52a0\u4e00\u4e9b\u4f60\u8ba4\u4e3a\u5bf9\u7535\u5f71\u8bc4\u8bba\u6216\u5b66\u751f\u4ecb\u7ecd\u7a0b\u5e8f\u529f\u80fd\u81f3\u5173\u91cd\u8981\u7684\u6d4b\u8bd5\u5427\u3002"),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u60f3\u66f4\u4e0a\u4e00\u5c42\u697c\uff0c\u4e5f\u53ef\u4ee5\u52a0\u4e00\u4e9bTypeScript\u7684\u96c6\u6210\u6d4b\u8bd5\u3002\u6211\u77e5\u9053\u6211\u4eec\u6ca1\u6709\u4e00\u8d77\u7ecf\u5386\u8fc7\u8fd9\u4e9b\uff0c\u4f46\u662f\u503c\u5f97\u4e00\u8bd5\uff01"),(0,r.kt)("p",null,"\u968f\u7740\u4f60\u5728\u8fd9\u4e2a\u9879\u76ee\u4e2d\u7684\u8fdb\u5c55\uff0c\u4e00\u4e9b\u6311\u6218\u4f1a\u53d8\u5f97\u66f4\u52a0\u5f00\u653e\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u63a8\u52a8\u81ea\u5df1\u3002\u4e0d\u8981\u6ee5\u7528\u8fd9\u4e2a\u673a\u4f1a\uff0c\u800c\u662f\u5c06\u5176\u89c6\u4e3a\u63d0\u5347\u5b66\u4e60\u6548\u679c\u7684\u673a\u4f1a\u3002"))}m.isMDXComponent=!0}}]);