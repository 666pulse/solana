"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6989],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>b});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=a.createContext({}),u=function(n){var e=a.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},l=function(n){var e=u(n.components);return a.createElement(i.Provider,{value:e},n.children)},p="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,i=n.parentName,l=s(n,["components","mdxType","originalType","parentName"]),p=u(t),m=o,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||r;return t?a.createElement(b,c(c({ref:e},l),{},{components:t})):a.createElement(b,c({ref:e},l))}));function b(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,c=new Array(r);c[0]=m;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=n,s[p]="string"==typeof n?n:o,c[1]=s;for(var u=2;u<r;u++)c[u]=t[u];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5431:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:106,sidebar_label:"\ud83d\udeb6\u200d \u6700\u540e\u7684\u4f5c\u54c1",sidebar_class_name:"green"},c="\ud83d\udeb6\u200d \u6700\u540e\u7684\u4f5c\u54c1",s={unversionedId:"Solana-Co-Learn/module6/finishing-touches/the-final-pieces/README",id:"Solana-Co-Learn/module6/finishing-touches/the-final-pieces/README",title:"\ud83d\udeb6\u200d \u6700\u540e\u7684\u4f5c\u54c1",description:"\u6982\u8ff0",source:"@site/docs/Solana-Co-Learn/module6/finishing-touches/the-final-pieces/README.md",sourceDirName:"Solana-Co-Learn/module6/finishing-touches/the-final-pieces",slug:"/Solana-Co-Learn/module6/finishing-touches/the-final-pieces/",permalink:"/all-in-one-solana/docs/Solana-Co-Learn/module6/finishing-touches/the-final-pieces/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Solana-Co-Learn/module6/finishing-touches/the-final-pieces/README.md",tags:[],version:"current",sidebarPosition:106,frontMatter:{sidebar_position:106,sidebar_label:"\ud83d\udeb6\u200d \u6700\u540e\u7684\u4f5c\u54c1",sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"Finishing touches",permalink:"/all-in-one-solana/docs/Solana-Co-Learn/module6/finishing-touches/"},next:{title:"\ud83d\ude80 \u51c6\u5907\u8d77\u98de",permalink:"/all-in-one-solana/docs/Solana-Co-Learn/module6/finishing-touches/preparing-for-takeoff/"}},i={},u=[{value:"\u6982\u8ff0",id:"\u6982\u8ff0",level:2},{value:"\u89e3\u51b3\u65b9\u6848\u4ee3\u7801",id:"\u89e3\u51b3\u65b9\u6848\u4ee3\u7801",level:2},{value:"\u6982\u8ff0",id:"\u6982\u8ff0-1",level:2}],l={toc:u},p="wrapper";function d(n){let{components:e,...r}=n;return(0,o.kt)(p,(0,a.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-\u6700\u540e\u7684\u4f5c\u54c1"},"\ud83d\udeb6\u200d \u6700\u540e\u7684\u4f5c\u54c1"),(0,o.kt)("h2",{id:"\u6982\u8ff0"},"\u6982\u8ff0"),(0,o.kt)("p",null,"\u8fd9\u662f\u6700\u540e\u7684\u51b2\u523a\uff01\u606d\u559c\u4f60\u5230\u8fbe\u8fd9\u91cc\uff01\u5bf9\u6bcf\u4e2a\u4eba\u6765\u8bf4\uff0c\u8fd9\u90fd\u662f\u4e00\u6bb5\u75af\u72c2\u7684\u65c5\u7a0b\u3002\u65e0\u8bba\u4f60\u7684NFT\u9879\u76ee\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\uff0c\u90fd\u8981\u6df1\u547c\u5438\uff0c\u7ed9\u81ea\u5df1\u9f13\u52b1\u3002\u4f60\u771f\u68d2\uff01"),(0,o.kt)("p",null,"\u73b0\u5728\uff0c\u8bc4\u4f30\u4e00\u4e0b\u4f60\u76ee\u524d\u6240\u62e5\u6709\u7684\uff0c\u5e76\u8003\u8651\u4e00\u4e0b\u4e3a\u4e86\u8ba9\u4f60\u7684\u9879\u76ee\u51c6\u5907\u597d\u8fdb\u884c\u4ea4\u4ed8\uff0c\u4f60\u53ef\u4ee5\u505a\u7684\u6700\u5c11\u5de5\u4f5c\u91cf\u3002\u5982\u679c\u8fd9\u610f\u5473\u7740\u6682\u65f6\u8df3\u8fc7",(0,o.kt)("inlineCode",{parentName:"p"},"Switchboard"),"\u7684\u4e8b\u60c5\uff0c\u90a3\u5c31\u8fd9\u6837\u5427\u3002"),(0,o.kt)("p",null,"\u73b0\u5728\u662f\u65f6\u5019\u5c06\u4f60\u7684\u7528\u6237\u754c\u9762\u4e0e\u4f60\u7684\u6218\u5229\u54c1\u7bb1\u548c\u88c5\u5907\u6307\u793a\u8fde\u63a5\u8d77\u6765\uff0c\u7136\u540e\u8fdb\u884c\u4efb\u4f55\u6700\u540e\u7684\u6da6\u9970\u5de5\u4f5c\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u4e1c\u897f\u53d1\u8d27\uff01"),(0,o.kt)("p",null,"\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u610f\u5473\u7740\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7528 ",(0,o.kt)("inlineCode",{parentName:"li"},"GearItem")," \u548c ",(0,o.kt)("inlineCode",{parentName:"li"},"Lootbox")," \u7ec4\u4ef6\u66ff\u6362\u6211\u4eec\u5728UI\u7684\u90a3\u90e8\u5206\u4f7f\u7528\u7684\u6a21\u62df ",(0,o.kt)("inlineCode",{parentName:"li"},"ItemBox")),(0,o.kt)("li",{parentName:"ul"},"\u6dfb\u52a0\u4e00\u4e2a",(0,o.kt)("inlineCode",{parentName:"li"},"instructions.ts"),"\u6587\u4ef6\uff0c\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u6211\u4eec\u521b\u5efa\u51fd\u6570\u6765\uff1a"),(0,o.kt)("li",{parentName:"ul"},"\u521b\u5efa\u6240\u6709\u5fc5\u9700\u7684\u6307\u4ee4\u6765\u521d\u59cb\u5316\u6211\u4eec\u7684\u6218\u5229\u54c1\u7bb1\u548c\u4ea4\u6362\u673a"),(0,o.kt)("li",{parentName:"ul"},"\u521b\u5efa\u6253\u5f00\u6218\u5229\u54c1\u7bb1\u6240\u9700\u7684\u6240\u6709\u8bf4\u660e"),(0,o.kt)("li",{parentName:"ul"},"\u6ce8\u610f\uff1a\u8fd9\u4e2a\u6709\u70b9\u6fc0\u70c8\uff0c\u54c8\u54c8 - \u770b\u770b\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u4ee3\u7801\uff0c\u4f46\u4e5f\u8bd5\u8bd5\u81ea\u5df1\u7684\u65b9\u6cd5"),(0,o.kt)("li",{parentName:"ul"},"\u8fdb\u884c\u5927\u91cf\u7684\u8c03\u8bd5\u548c\u4f18\u5316")),(0,o.kt)("p",null,"\u8bf4\u5b9e\u8bdd\uff0c\u8fd9\u4e2a\u5217\u8868\u8fd8\u6709\u5f88\u591a\u3002\u6211\u4eec\u6dfb\u52a0\u4e86\u5f88\u591a\u7ec4\u4ef6\uff0c\u4ee5\u786e\u4fdd\u5728\u4ea4\u6613\u548c\u94fe\u4e0a\u53d8\u5316\u4e4b\u540e\u72b6\u6001\u5f97\u5230\u66f4\u65b0\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u5b83\u8fd8\u4e0d\u5b8c\u7f8e\u3002\u603b\u662f\u6709\u66f4\u591a\u7684\u7a7a\u95f4\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\uff0c\u4f46\u4e0d\u8981\u8ba9\u5b8c\u7f8e\u4e3b\u4e49\u6210\u4e3a\u4f60\u7684\u654c\u4eba\u3002\u5c3d\u529b\u800c\u4e3a\uff0c\u7136\u540e\u53d1\u8d27\uff01"),(0,o.kt)("h2",{id:"\u89e3\u51b3\u65b9\u6848\u4ee3\u7801"},"\u89e3\u51b3\u65b9\u6848\u4ee3\u7801"),(0,o.kt)("p",null,"\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u4f4d\u4e8e",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CreatorsDAO/buildspace-buildoors/tree/solution-lootboxes"},"Buildoors\u4ee3\u7801\u5e93"),"\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"solution-lootboxes")," \u5206\u652f\u4e0a\u3002\u5728\u90a3\u91cc\u6709\u4e00\u4e9b\u63d0\u4ea4\u4f7f\u5176\u4e0e\u4f60\u4e0a\u6b21\u770b\u5230\u7684\u4e0d\u540c\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u67e5\u770b\u6240\u6709\u66f4\u6539\uff0c\u8bf7\u786e\u4fdd\u4ece\u4e0a\u5468\u7684",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CreatorsDAO/buildspace-buildoors/compare/solution-core-5...solution-lootboxes"},"\u5206\u652f\u67e5\u770b\u5dee\u5f02"),"\u3002"),(0,o.kt)("p",null,"\u6709\u4e00\u4e9b\u6307\u5357\uff0c\u4f46\u4f60\u53ef\u4ee5\u5148\u81ea\u5df1\u5f00\u59cb\u3002\u795d\u4f60\u597d\u8fd0\uff01"),(0,o.kt)("h2",{id:"\u6982\u8ff0-1"},"\u6982\u8ff0"),(0,o.kt)("p",null,"\u6700\u540e\u4e00\u4e2a\u9879\u76ee\u6240\u9700\u7684\u4e00\u5207\u90fd\u5728\u4e0a\u4e00\u8bfe\u4e2d\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u53ea\u6709\u4f60\u548c\u8fd9\u6bb5\u6587\u5b57\u4e86\uff0c\u5b9d\u8d1d\u3002\u6211\u4eec\u5f00\u59cb\u5427\uff01"),(0,o.kt)("p",null,"\u8fd9\u5c31\u662f\u6700\u7ec8\u4ea7\u54c1\u7684\u6837\u5b50\uff0c\u8fd9\u4e2a\u622a\u56fe\u662f\u8fd9\u4e2a\u9879\u76ee\u7684\u4e00\u4e2a\u5de5\u4f5c\u793a\u4f8b\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(7657).Z,width:"1338",height:"886"})),(0,o.kt)("p",null,"\u5728\u8fd9\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u4e13\u6ce8\u4e8e\u4f7f\u6218\u5229\u54c1\u7bb1\u548c\u88c5\u5907\u529f\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u6700\u7ec8\u7684\u4ee3\u7801\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u6da6\u8272\uff0c\u5e76\u4e14\u8fd8\u6709\u4e00\u4e9b\u5c0f\u7684\u9519\u8bef\u9700\u8981\u89e3\u51b3\uff0c\u4f60\u53ef\u4ee5\u5728\u53d1\u8d27\u4e4b\u524d\u968f\u610f\u5904\u7406\u3002"),(0,o.kt)("p",null,"\u51e0\u70b9\u6ce8\u610f\u4e8b\u9879\uff0c\u8bf7\u786e\u4fdd\u6bcf\u6b21\u66f4\u6539\u7a0b\u5e8f\u65f6\u90fd\u590d\u5236\u5e76\u7c98\u8d34\u65b0\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"IDL"),"\u3002\u4ed4\u7ec6\u68c0\u67e5\u4f60\u7684React hooks\u548c\u4f9d\u8d56\u9879\u3002\u5c3d\u53ef\u80fd\u5c06\u6240\u6709\u5185\u5bb9\u5206\u89e3\u4e3a\u5c0f\u5757\u3002"),(0,o.kt)("p",null,"\u6211\u4eec\u73b0\u5728\u8981\u6df1\u5165\u7814\u7a76\u4e00\u4e9b\u4ee3\u7801\u7684\u53d8\u52a8\u3002\u8ba9\u6211\u4eec\u5f00\u59cb",(0,o.kt)("inlineCode",{parentName:"p"},"/components/WorkspaceProvider.tsx"),"\u5427\u3002"),(0,o.kt)("p",null,"\u53ea\u6709\u4e00\u4e9b\u5c0f\u7684\u53d8\u52a8\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u52a0\u5165",(0,o.kt)("inlineCode",{parentName:"p"},"switchboard program."),"\u3002"),(0,o.kt)("p",null,"\u6709\u4e00\u4e2a\u65b0\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"useState"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const [switchboardProgram, setProgramSwitchboard] = useState<any>()\n")),(0,o.kt)("p",null,"\u7136\u540e\u6211\u4eec\u52a0\u8f7d",(0,o.kt)("inlineCode",{parentName:"p"},"switchboard program"),"\uff0c\u5e76\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect"),"\u8bbe\u7f6e",(0,o.kt)("inlineCode",{parentName:"p"},"the program switchboard"),"\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u5de5\u4f5c\u533a\u59cb\u7ec8\u53ef\u4ee5\u53ca\u65f6\u66f4\u65b0\u6211\u4eec\u6240\u9700\u7684\u6240\u6709\u7a0b\u5e8f\u3002\u9664\u975e\u4f60\u662fReact\u4e13\u5bb6\uff0c\u5426\u5219\u8fd9\u53ef\u80fd\u4f1a\u6709\u4e9b\u6311\u6218\uff0c\u6240\u4ee5\u8bf7\u968f\u610f\u6df1\u5165\u53c2\u8003\u8fd9\u6bb5\u4ee3\u7801\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'async function program() {\n    let response = await loadSwitchboardProgram(\n      "devnet",\n      connection,\n      ((provider as AnchorProvider).wallet as AnchorWallet).payer\n    )\n    return response\n  }\n\nuseEffect(() => {\n    program().then((result) => {\n      setProgramSwitchboard(result)\n      console.log("result", result)\n    })\n  }, [connection])\n')),(0,o.kt)("p",null,"\u597d\u7684\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u5165 ",(0,o.kt)("inlineCode",{parentName:"p"},"instructions.ts")," \u6587\u4ef6\u5939\u4e2d\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"utils")," \u6587\u4ef6\uff0c\u8fd9\u662f\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002\u8fd9\u91cc\u6709\u4e24\u4e2a\u516c\u5171\u51fd\u6570\uff0c\u5206\u522b\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"createOpenLootboxInstructions")," \u6307\u4ee4\u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"createInitSwitchboardInstructions")," \u6307\u4ee4\u3002\u540e\u8005\u7528\u4e8e\u6253\u5305\u4ea4\u6362\u673a\u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u5185\u5bb9\uff0c\u5e76\u521d\u59cb\u5316\u62bd\u5956\u7bb1\u7a0b\u5e8f\u4e2d\u7684\u7528\u6237\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export async function createOpenLootboxInstructions(\n  connection: Connection,\n  stakingProgram: Program<AnchorNftStaking>,\n  switchboardProgram: SwitchboardProgram,\n  lootboxProgram: Program<LootboxProgram>,\n  userPubkey: PublicKey,\n  nftTokenAccount: PublicKey,\n  box: number\n): Promise<TransactionInstruction[]> {\n  const [userStatePda] = PublicKey.findProgramAddressSync(\n    [userPubkey.toBytes()],\n    lootboxProgram.programId\n  )\n\n  const state = await lootboxProgram.account.userState.fetch(userStatePda)\n\n  const accounts = await getAccountsAndData(\n    lootboxProgram,\n    switchboardProgram,\n    userPubkey,\n    state.vrf\n  )\n\n  return await createAllOpenLootboxInstructions(\n    connection,\n    stakingProgram,\n    lootboxProgram,\n    switchboardProgram,\n    accounts,\n    nftTokenAccount,\n    box\n  )\n}\n")),(0,o.kt)("p",null,"\u8fdb\u4e00\u6b65\u5f80\u4e0b\uff0c\u6709\u4e00\u4e2a ",(0,o.kt)("inlineCode",{parentName:"p"},"getAccountsAndData")," \u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u56db\u4e2a\u5b57\u6bb5\uff0c\u6b63\u5982\u4f60\u6240\u89c1\uff0c\u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a\u5b57\u6bb5\uff0c\u4f60\u9700\u8981\u4e8b\u5148\u751f\u6210\u6216\u83b7\u53d6",(0,o.kt)("inlineCode",{parentName:"p"},"vrf"),"\u8d26\u6237\u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u83b7\u53d6\u4e00\u4e9b\u8d26\u6237\u3001\u589e\u52a0\u548c\u5176\u4ed6\u6570\u636e\uff0c\u5c06\u5b83\u4eec\u6253\u5305\u8d77\u6765\uff0c\u5e76\u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u8fd4\u56de\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'async function getAccountsAndData(\n  lootboxProgram: Program<LootboxProgram>,\n  switchboardProgram: SwitchboardProgram,\n  userPubkey: PublicKey,\n  vrfAccount: PublicKey\n): Promise<AccountsAndDataSuperset> {\n  const [userStatePda] = PublicKey.findProgramAddressSync(\n    [userPubkey.toBytes()],\n    lootboxProgram.programId\n  )\n\n  // required switchboard accoount\n  const [programStateAccount, stateBump] =\n    ProgramStateAccount.fromSeed(switchboardProgram)\n\n  // required switchboard accoount\n  const queueAccount = new OracleQueueAccount({\n    program: switchboardProgram,\n    // devnet permissionless queue\n    publicKey: new PublicKey("F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy"),\n  })\n\n  // required switchboard accoount\n  const queueState = await queueAccount.loadData()\n  // wrapped SOL is used to pay for switchboard VRF requests\n  const wrappedSOLMint = await queueAccount.loadMint()\n\n  // required switchboard accoount\n  const [permissionAccount, permissionBump] = PermissionAccount.fromSeed(\n    switchboardProgram,\n    queueState.authority,\n    queueAccount.publicKey,\n    vrfAccount\n  )\n\n  // required switchboard accoount\n  // escrow wrapped SOL token account owned by the VRF account we will initialize\n  const escrow = await spl.getAssociatedTokenAddress(\n    wrappedSOLMint.address,\n    vrfAccount,\n    true\n  )\n\n  const size = switchboardProgram.account.vrfAccountData.size\n\n  return {\n    userPubkey: userPubkey,\n    userStatePda: userStatePda,\n    vrfAccount: vrfAccount,\n    escrow: escrow,\n    wrappedSOLMint: wrappedSOLMint,\n    programStateAccount: programStateAccount,\n    stateBump: stateBump,\n    permissionBump: permissionBump,\n    queueAccount: queueAccount,\n    queueState: queueState,\n    permissionAccount: permissionAccount,\n    size: size,\n  }\n}\n')),(0,o.kt)("p",null,"\u8be5\u5bf9\u8c61\u5728\u6587\u4ef6\u5e95\u90e8\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u63a5\u53e3\uff0c\u8fd9\u53ea\u662f\u4e3a\u4e86\u786e\u4fdd\u4f60\u62e5\u6709\u6240\u9700\u7684\u4e00\u5207\uff0c\u5e76\u80fd\u591f\u9002\u5f53\u5730\u8c03\u7528\u5b83\u4eec\u3002\u867d\u7136\u6bcf\u4e2a\u6307\u4ee4\u4e0d\u9700\u8981\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\uff0c\u4f46\u8fd9\u5c06\u4f7f\u6bcf\u4e2a\u6307\u4ee4\u80fd\u591f\u8f7b\u677e\u5730\u8bbf\u95ee\u6240\u9700\u7684\u6570\u636e\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"interface AccountsAndDataSuperset {\n  userPubkey: PublicKey\n  userStatePda: PublicKey\n  vrfAccount: PublicKey\n  escrow: PublicKey\n  wrappedSOLMint: spl.Mint\n  programStateAccount: ProgramStateAccount\n  stateBump: number\n  permissionBump: number\n  queueAccount: OracleQueueAccount\n  queueState: any\n  permissionAccount: PermissionAccount\n  size: number\n}\n")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u6df1\u5165\u4e86\u89e3 ",(0,o.kt)("inlineCode",{parentName:"p"},"createInitSwitchboardInstructions")," \u3002\u5b83\u9996\u5148\u751f\u6210\u4e00\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"vrf"),"\u5bc6\u94a5\u5bf9\uff0c\u7136\u540e\u8c03\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"getAccountsAndData")," \u6765\u83b7\u53d6\u6211\u4eec\u6240\u9700\u7684\u6240\u6709\u8d26\u6237\u3002\u7136\u540e\uff0c\u901a\u8fc7 ",(0,o.kt)("inlineCode",{parentName:"p"},"initSwitchboardLootboxUser")," \uff0c\u5b83\u7ec4\u88c5\u6307\u4ee4\u3002\u7136\u540e\u8fd4\u56de\u6307\u4ee4\uff0c\u4ee5\u53ca\u7528\u4e8e\u7b7e\u540d\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"vrf"),"\u5bc6\u94a5\u5bf9\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export async function createInitSwitchboardInstructions(\n  switchboardProgram: SwitchboardProgram,\n  lootboxProgram: Program<LootboxProgram>,\n  userPubkey: PublicKey\n): Promise<{\n  instructions: Array<TransactionInstruction>\n  vrfKeypair: Keypair\n}> {\n  const vrfKeypair = Keypair.generate()\n\n  const accounts = await getAccountsAndData(\n    lootboxProgram,\n    switchboardProgram,\n    userPubkey,\n    vrfKeypair.publicKey\n  )\n\n  const initInstructions = await initSwitchboardLootboxUser(\n    switchboardProgram,\n    lootboxProgram,\n    accounts,\n    vrfKeypair\n  )\n\n  return { instructions: initInstructions, vrfKeypair: vrfKeypair }\n}\n")),(0,o.kt)("p",null,"\u5173\u4e8e ",(0,o.kt)("inlineCode",{parentName:"p"},"initSwitchboardLootboxUser")," \uff0c\u6211\u4eec\u9996\u5148\u83b7\u5f97\u4e00\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"PDA"),"\u548c",(0,o.kt)("inlineCode",{parentName:"p"},"state bump"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'async function initSwitchboardLootboxUser(\n  switchboardProgram: SwitchboardProgram,\n  lootboxProgram: Program<LootboxProgram>,\n  accountsAndData: AccountsAndDataSuperset,\n  vrfKeypair: Keypair\n): Promise<Array<TransactionInstruction>> {\n  // lootbox account PDA\n  const [lootboxPointerPda] = await PublicKey.findProgramAddress(\n    [Buffer.from("lootbox"), accountsAndData.userPubkey.toBytes()],\n    lootboxProgram.programId\n  )\n\n  const stateBump = accountsAndData.stateBump\n')),(0,o.kt)("p",null,"\u7136\u540e\u6211\u4eec\u5f00\u59cb\u7ec4\u88c5\u4e00\u7cfb\u5217\u7684\u6307\u4ee4\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u521b\u5efa\u4e00\u4e2a\u4e0e\u6258\u7ba1\u76f8\u5173\u7684\u4ee4\u724c\u8d26\u6237\uff0c\u7531vrf\u5bc6\u94a5\u5bf9\u62e5\u6709\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const txnIxns: TransactionInstruction[] = [\n    // create escrow ATA owned by VRF account\n    spl.createAssociatedTokenAccountInstruction(\n      accountsAndData.userPubkey,\n      accountsAndData.escrow,\n      vrfKeypair.publicKey,\n      accountsAndData.wrappedSOLMint.address\n    ),\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\u662f\u8bbe\u7f6e\u6743\u9650\u6307\u4ee4\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// transfer escrow ATA owner to switchboard programStateAccount\n    spl.createSetAuthorityInstruction(\n      accountsAndData.escrow,\n      vrfKeypair.publicKey,\n      spl.AuthorityType.AccountOwner,\n      accountsAndData.programStateAccount.publicKey,\n      [vrfKeypair]\n    ),\n\n")),(0,o.kt)("p",null,"\u7136\u540e\u6211\u4eec\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"create account"),"\u6765\u521b\u5efavrf\u8d26\u6237\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// request system program to create new account using newly generated keypair for VRF account\n   SystemProgram.createAccount({\n     fromPubkey: accountsAndData.userPubkey,\n     newAccountPubkey: vrfKeypair.publicKey,\n     space: accountsAndData.size,\n     lamports:\n       await switchboardProgram.provider.connection.getMinimumBalanceForRentExemption(\n         accountsAndData.size\n       ),\n     programId: switchboardProgram.programId,\n   }),\n")),(0,o.kt)("p",null,"\u7136\u540e\u6211\u4eec\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"switchboard program "),"\u65b9\u6cd5\u8fdb\u884c",(0,o.kt)("inlineCode",{parentName:"p"},"vrf"),"\u521d\u59cb\u5316\uff0c\u5176\u4e2d\u6211\u4eec\u63d0\u4f9b\u4e86\u6d88\u8017\u968f\u673a\u6027\u56de\u8c03\u51fd\u6570\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// initialize new VRF account, included the callback CPI into lootbox program as instruction data\nawait switchboardProgram.methods\n  .vrfInit({\n    stateBump,\n    callback: {\n      programId: lootboxProgram.programId,\n      accounts: [\n        {\n          pubkey: accountsAndData.userStatePda,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: vrfKeypair.publicKey,\n          isSigner: false,\n          isWritable: false,\n        },\n        { pubkey: lootboxPointerPda, isSigner: false, isWritable: true },\n        {\n          pubkey: accountsAndData.userPubkey,\n          isSigner: false,\n          isWritable: false,\n        },\n      ],\n      ixData: new BorshInstructionCoder(lootboxProgram.idl).encode(\n        "consumeRandomness",\n        ""\n      ),\n    },\n  })\n  .accounts({\n    vrf: vrfKeypair.publicKey,\n    escrow: accountsAndData.escrow,\n    authority: accountsAndData.userStatePda,\n    oracleQueue: accountsAndData.queueAccount.publicKey,\n    programState: accountsAndData.programStateAccount.publicKey,\n    tokenProgram: spl.TOKEN_PROGRAM_ID,\n  })\n  .instruction(),\n// initialize switchboard permission account, required account\n')),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"switchboard"),"\u6765\u8c03\u7528\u6743\u9650\u521d\u59cb\u5316\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"await switchboardProgram.methods\n      .permissionInit({})\n      .accounts({\n        permission: accountsAndData.permissionAccount.publicKey,\n        authority: accountsAndData.queueState.authority,\n        granter: accountsAndData.queueAccount.publicKey,\n        grantee: vrfKeypair.publicKey,\n        payer: accountsAndData.userPubkey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction(),\n")),(0,o.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u5c06\u6211\u4eec\u7684\u6218\u5229\u54c1\u7bb1\u8ba1\u5212\u79f0\u4e3a",(0,o.kt)("inlineCode",{parentName:"p"},"init user"),"\uff0c\u5e76\u8fd4\u56de\u6307\u793a\uff0c\u8fd9\u5c06\u7531\u8c03\u7528\u8005\u6253\u5305\u6210\u4ea4\u6613\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"await lootboxProgram.methods\n      .initUser({\n        switchboardStateBump: accountsAndData.stateBump,\n        vrfPermissionBump: accountsAndData.permissionBump,\n      })\n      .accounts({\n        // state: userStatePDA,\n        vrf: vrfKeypair.publicKey,\n        // payer: publicKey,\n        // systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .instruction(),\n  ]\n\n  return txnIxns\n}\n")),(0,o.kt)("p",null,"\u6700\u540e\uff0c\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b ",(0,o.kt)("inlineCode",{parentName:"p"},"createOpenLootboxInstructions")," \u3002\u9996\u5148\uff0c\u6211\u4eec\u83b7\u53d6\u7528\u6237\u72b6\u6001",(0,o.kt)("inlineCode",{parentName:"p"},"PDA"),"\uff0c\u6211\u4eec\u5fc5\u987b\u5b9e\u9645\u83b7\u53d6\u8be5\u8d26\u6237\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u63d0\u53d6",(0,o.kt)("inlineCode",{parentName:"p"},"vrf"),"\u5bc6\u94a5\u5bf9\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export async function createOpenLootboxInstructions(\n  connection: Connection,\n  stakingProgram: Program<AnchorNftStaking>,\n  switchboardProgram: SwitchboardProgram,\n  lootboxProgram: Program<LootboxProgram>,\n  userPubkey: PublicKey,\n  nftTokenAccount: PublicKey,\n  box: number\n): Promise<TransactionInstruction[]> {\n  const [userStatePda] = PublicKey.findProgramAddressSync(\n    [userPubkey.toBytes()],\n    lootboxProgram.programId\n  )\n\n  const state = await lootboxProgram.account.userState.fetch(userStatePda)\n")),(0,o.kt)("p",null,"\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"getAccountsAndData")," \u6765\u83b7\u53d6\u6211\u4eec\u6240\u9700\u7684\u6240\u6709\u8d26\u6237\u3002\u63a5\u4e0b\u6765\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"createAllOpenLootboxInstructions")," \uff0c\u6211\u4eec\u5c06\u6df1\u5165\u63a2\u8ba8\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const accounts = await getAccountsAndData(\n    lootboxProgram,\n    switchboardProgram,\n    userPubkey,\n    state.vrf\n  )\n\n  return await createAllOpenLootboxInstructions(\n    connection,\n    stakingProgram,\n    lootboxProgram,\n    switchboardProgram,\n    accounts,\n    nftTokenAccount,\n    box\n  )\n}\n")),(0,o.kt)("p",null,"\u6211\u4eec\u83b7\u5f97\u4e86\u5305\u88c5\u7684\u4ee3\u5e01\u8d26\u6237\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5305\u88c5\u7684SOL\uff0c\u56e0\u4e3a\u8fd9\u662f\u6211\u4eec\u7528\u6765\u652f\u4ed8\u8bf7\u6c42\u968f\u673a\u6570\u7684\u5fc5\u9700\u54c1\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"async function createAllOpenLootboxInstructions(\n  connection: Connection,\n  stakingProgram: Program<AnchorNftStaking>,\n  lootboxProgram: Program<LootboxProgram>,\n  switchboardProgram: SwitchboardProgram,\n  accountsAndData: AccountsAndDataSuperset,\n  nftTokenAccount: PublicKey,\n  box: number\n): Promise<TransactionInstruction[]> {\n  // user Wrapped SOL token account\n  // wSOL amount is then transferred to escrow account to pay switchboard oracle for VRF request\n  const wrappedTokenAccount = await spl.getAssociatedTokenAddress(\n    accountsAndData.wrappedSOLMint.address,\n    accountsAndData.userPubkey\n  )\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u83b7\u5f97\u4e0e",(0,o.kt)("inlineCode",{parentName:"p"},"BLD"),"\u76f8\u5173\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"stakeTokenAccount")," \uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"BLD"),"\u4ee3\u5e01\u6765\u6362\u53d6\u5f00\u542f\u6218\u5229\u54c1\u7bb1\u3002\u7136\u540e\u662f\u8d28\u62bc\u8d26\u6237\uff0c\u4ee5\u786e\u4fdd\u4f60\u901a\u8fc7\u8d28\u62bc\u83b7\u5f97\u8db3\u591f\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"BLD"),"\u6765\u5f00\u542f\u6218\u5229\u54c1\u7bb1\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// user BLD token account, used to pay BLD tokens to call the request randomness instruction on Lootbox program\n  const stakeTokenAccount = await spl.getAssociatedTokenAddress(\n    STAKE_MINT,\n    accountsAndData.userPubkey\n  )\n\n  const [stakeAccount] = PublicKey.findProgramAddressSync(\n    [accountsAndData.userPubkey.toBytes(), nftTokenAccount.toBuffer()],\n    stakingProgram.programId\n  )\n")),(0,o.kt)("p",null,"\u8fd9\u91cc\u5f00\u59cb\u7ec4\u88c5\u8bf4\u660e\u3002\u5982\u679c\u6ca1\u6709\u5c01\u88c5\u7684\u4ee4\u724c\u8d26\u6237\uff0c\u6211\u4eec\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u521b\u5efa\u5b83\u7684\u6307\u4ee4\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"let instructions: TransactionInstruction[] = []\n  // check if a wrapped SOL token account exists, if not add instruction to create one\n  const account = await connection.getAccountInfo(wrappedTokenAccount)\n  if (!account) {\n    instructions.push(\n      spl.createAssociatedTokenAccountInstruction(\n        accountsAndData.userPubkey,\n        wrappedTokenAccount,\n        accountsAndData.userPubkey,\n        accountsAndData.wrappedSOLMint.address\n      )\n    )\n  }\n")),(0,o.kt)("p",null,"\u7136\u540e\u6211\u4eec\u63a8\u9001\u4e00\u4e2a\u8f6c\u8d26\u6307\u4ee4\uff0c\u5c06SOL\u8f6c\u79fb\u5230",(0,o.kt)("inlineCode",{parentName:"p"},"wrapped SOL"),"\u3002\u7136\u540e\u662f\u4e00\u4e2a\u540c\u6b65",(0,o.kt)("inlineCode",{parentName:"p"},"wrapped SOL"),"\u4f59\u989d\u7684\u6307\u4ee4\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// transfer SOL to user's own wSOL token account\n instructions.push(\n   SystemProgram.transfer({\n     fromPubkey: accountsAndData.userPubkey,\n     toPubkey: wrappedTokenAccount,\n     lamports: 0.002 * LAMPORTS_PER_SOL,\n   })\n )\n // sync wrapped SOL balance\n instructions.push(spl.createSyncNativeInstruction(wrappedTokenAccount))\n")),(0,o.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u5236\u4f5c\u5e76\u8fd4\u56de\u4e86\u6253\u5f00\u6218\u5229\u54c1\u7bb1\u7684\u8bf4\u660e\u4e66\uff0c\u8fd9\u6837\u547c\u53eb\u8005\u5c31\u53ef\u4ee5\u5c06\u5b83\u4eec\u6253\u5305\u5e76\u53d1\u9001\u51fa\u53bb\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// Lootbox program request randomness instruction\n  instructions.push(\n    await lootboxProgram.methods\n      .openLootbox(new BN(box))\n      .accounts({\n        user: accountsAndData.userPubkey,\n        stakeMint: STAKE_MINT,\n        stakeMintAta: stakeTokenAccount,\n        stakeState: stakeAccount,\n        state: accountsAndData.userStatePda,\n        vrf: accountsAndData.vrfAccount,\n        oracleQueue: accountsAndData.queueAccount.publicKey,\n        queueAuthority: accountsAndData.queueState.authority,\n        dataBuffer: accountsAndData.queueState.dataBuffer,\n        permission: accountsAndData.permissionAccount.publicKey,\n        escrow: accountsAndData.escrow,\n        programState: accountsAndData.programStateAccount.publicKey,\n        switchboardProgram: switchboardProgram.programId,\n        payerWallet: wrappedTokenAccount,\n        recentBlockhashes: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n      })\n      .instruction()\n  )\n\n  return instructions\n}\n")),(0,o.kt)("p",null,"\u8fd9\u5c31\u662f\u8bf4\u660e\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u8ba9\u6211\u4eec\u53bb\u770b\u770b\u65b0\u7684\u6218\u5229\u54c1\u7bb1\u7ec4\u4ef6\uff0c\u8fd9\u4e9b\u8bf4\u660e\u5c06\u4f1a\u88ab\u7528\u5230\u90a3\u91cc\u3002"))}d.isMDXComponent=!0},7657:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/YF5XxJr-a6e54bd9064f2a448e63dbe095fc2429.png"}}]);