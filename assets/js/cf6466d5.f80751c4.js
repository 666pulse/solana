"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4796],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>m});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=r.createContext({}),s=function(n){var e=r.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},u=function(n){var e=s(n.components);return r.createElement(i.Provider,{value:e},n.children)},p="mdxType",g={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,i=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),p=s(t),d=o,m=p["".concat(i,".").concat(d)]||p[d]||g[d]||a;return t?r.createElement(m,c(c({ref:e},u),{},{components:t})):r.createElement(m,c({ref:e},u))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,c=new Array(a);c[0]=d;var l={};for(var i in e)hasOwnProperty.call(e,i)&&(l[i]=e[i]);l.originalType=n,l[p]="string"==typeof n?n:o,c[1]=l;for(var s=2;s<a;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4274:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:136,sidebar_label:"Solana Program\u5904\u7406\u903b\u8f91",sidebar_class_name:"green"},c="Solana Program \u5904\u7406\u903b\u8f91",l={unversionedId:"Solana-Bootcamp-zh/week5/solana-program-logic",id:"Solana-Bootcamp-zh/week5/solana-program-logic",title:"Solana Program \u5904\u7406\u903b\u8f91",description:"\u6211\u4eec\u8fd9\u91cc\u8bf4\u7684\u5904\u7406\u903b\u8f91\uff0c\u5e76\u4e0d\u662fRuntime\u662f\u5982\u4f55\u53bb\u5904\u7406\u903b\u8f91\u7684\u3002\u800c\u662f\u5728\u6211\u4eec\u7684\u5408\u7ea6\u91cc\u9762\uff0c\u8981 \u600e\u4e48\u5b89\u6392\u903b\u8f91\u3002",source:"@site/docs/Solana-Bootcamp-zh/week5/solana-program-logic.md",sourceDirName:"Solana-Bootcamp-zh/week5",slug:"/Solana-Bootcamp-zh/week5/solana-program-logic",permalink:"/all-in-one-solana/docs/Solana-Bootcamp-zh/week5/solana-program-logic",draft:!1,editUrl:"https://github.com/CreatorsDAO/all-in-one-solana/edit/main/docs/Solana-Bootcamp-zh/week5/solana-program-logic.md",tags:[],version:"current",sidebarPosition:136,frontMatter:{sidebar_position:136,sidebar_label:"Solana Program\u5904\u7406\u903b\u8f91",sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"Solana Program \u57fa\u7840\u6982\u5ff5",permalink:"/all-in-one-solana/docs/Solana-Bootcamp-zh/week5/solana-program-struct"},next:{title:"Solana \u5b98\u65b9\u4e2d\u6587\u6587\u6863\ud83d\udcc4",permalink:"/all-in-one-solana/docs/Solana-docs/"}},i={},s=[{value:"\u7ed3\u6784\u5316\u5de5\u7a0b",id:"\u7ed3\u6784\u5316\u5de5\u7a0b",level:2},{value:"\u5b9a\u4e49\u6307\u4ee4",id:"\u5b9a\u4e49\u6307\u4ee4",level:2},{value:"\u6307\u4ee4\u89e3\u6790",id:"\u6307\u4ee4\u89e3\u6790",level:2},{value:"\u6267\u884c\u6307\u4ee4",id:"\u6267\u884c\u6307\u4ee4",level:2},{value:"Model\u5c42",id:"model\u5c42",level:2},{value:"\u5ba2\u6237\u7aef\u8bbf\u95ee",id:"\u5ba2\u6237\u7aef\u8bbf\u95ee",level:2}],u={toc:s},p="wrapper";function g(n){let{components:e,...t}=n;return(0,o.kt)(p,(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"solana-program-\u5904\u7406\u903b\u8f91"},"Solana Program \u5904\u7406\u903b\u8f91"),(0,o.kt)("p",null,"\u6211\u4eec\u8fd9\u91cc\u8bf4\u7684\u5904\u7406\u903b\u8f91\uff0c\u5e76\u4e0d\u662fRuntime\u662f\u5982\u4f55\u53bb\u5904\u7406\u903b\u8f91\u7684\u3002\u800c\u662f\u5728\u6211\u4eec\u7684\u5408\u7ea6\u91cc\u9762\uff0c\u8981 \u600e\u4e48\u5b89\u6392\u903b\u8f91\u3002"),(0,o.kt)("p",null,'\u5728\u524d\u9762\u7684\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u89c4\u5212\u4e86\u4e00\u4e2a\u5408\u7ea6\u7684\u4ee3\u7801\u7ed3\u6784\uff0c\u5176\u4e2d\u5728"process.rs"\u6587\u4ef6\u4e2d\u6765\u653e\u6211\u4eec\u7684 \u5904\u7406\u903b\u8f91\uff0c\u6bcf\u4e2a\u5904\u7406\u903b\u8f91\u5904\u7406\u5bf9\u5e94\u7684Instruction\u3002\u5e76\u4e14Instruction\u7684data\u90e8\u5206\u662f\u901a\u8fc7Borsh \u6765\u8fdb\u884c\u5e8f\u5217\u5316\u7684\u3002'),(0,o.kt)("p",null,'\u90a3\u4e48\u6211\u4eec\u4e00\u4e2a\u5408\u7ea6\u4e2d\u600e\u4e48\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u6765\u6267\u884c\u4e0d\u540c\u7684\u903b\u8f91\u5462\uff1f\u5728\u524d\u9762\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u5408\u7ea6\u53ea\u6709\u901a\u8fc7 "entrypoint"\u5b8f\u5b9a\u4e49\u7684\u4e00\u4e2a\u5165\u53e3\u3002\u90a3\u4e48\u6211\u4eec\u662f\u600e\u4e48\u533a\u5206\u4e0d\u540c\u7684Instruction\u7684\u5462\uff1f'),(0,o.kt)("p",null,"\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u53ea\u6709\u4e00\u4e2aInstruction\uff0c\u5728\u5ba2\u6237\u7aef\u7684\u4e0d\u540c\u7684Instruction\u5176\u5b9e\u53ea\u662fdata\u90e8\u5206\u5b58\u653e\u7684 \u6570\u636e\u4e0d\u540c\u800c\u5df2\u3002\u8fd9\u91cc\u5982\u679c\u6709\u5e94\u7528\u5f00\u53d1\u7ecf\u9a8c\u7684\u540c\u5b66\uff0c\u7acb\u9a6c\u5c31\u4f1a\u8054\u60f3\u5230Protobuf\u91cc\u9762\u5b9a\u4e49\u7684\u5404\u79cd\u6d88\u606f\u3002 \u5176\u5b9e\u8fd9\u91cc\u6211\u4eec\u4e5f\u662f\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u5728data\u90e8\u5206\u7684\u6700\u5f00\u59cb\uff0c\u6211\u4eec\u7528\u6765\u653ecmd\uff0ccmd\u6765\u8868\u793a\u540e\u9762\u7684\u5185\u5bb9\u8981\u6309\u7167 \u4ec0\u4e48\u7ed3\u6784\u6765\u89e3\u6790\u3002"),(0,o.kt)("h2",{id:"\u7ed3\u6784\u5316\u5de5\u7a0b"},"\u7ed3\u6784\u5316\u5de5\u7a0b"),(0,o.kt)("p",null,"\u4e0a\u9762\u6211\u4eec\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5b89\u6392\u4e86\u4e00\u4e2a\u5408\u7ea6\u7684\u5404\u4e2a\u90e8\u5206\u3002\u5f53\u5408\u7ea6\u903b\u8f91\u590d\u6742\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4e00\u4e00\u62c6\u5206\uff0c \u5728\u4e66\u5199\u7684\u65f6\u5019\u66f4\u6e05\u6670\u3002\u6765\u770btoken \u5408\u7ea6\u7684\u7ed3\u6784\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 entrypoint.rs\n\u2502   \u251c\u2500\u2500 error.rs\n\u2502   \u251c\u2500\u2500 instruction.rs\n\u2502   \u251c\u2500\u2500 lib.rs\n\u2502   \u251c\u2500\u2500 processor.rs\n\u2502   \u2514\u2500\u2500 state.rs\n")),(0,o.kt)("p",null,'\u5176\u4e2d"entrypoint" \u4e13\u95e8\u7528\u6765\u5b9a\u4e49\u5408\u7ea6\u5165\u53e3\u51fd\u6570\u3002'),(0,o.kt)("p",null,'\u5728entrypoint\u4e2d\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528"processor"\u91cc\u9762\u5b9a\u4e49\u7684\u5177\u4f53\u903b\u8f91\u3002\u5bf9\u4e0d\u540c\u7684\u547d\u4ee4\u8fdb\u884c\u5904\u7406\u3002'),(0,o.kt)("p",null,'\u5728\u94fe\u4e0a\u8981\u5b58\u50a8\u7684\u7ed3\u6784\u6570\u636e\uff0c\u5982Token\u8d26\u53f7pub struct Account, Token\u4fe1\u606f pub struct Mint\u653e\u5728 "state"\u4e2d\uff0c\u6709\u70b9\u7c7b\u4f3cMVC\u7ed3\u6784\u91cc\u9762\u7684model\u3002'),(0,o.kt)("p",null,'\u76f8\u5173\u9519\u8bef\uff0c\u5b9a\u4e49\u5728"error"\u91cc\u9762\uff0c\u5728"processor"\u4e2d\u5904\u7406\u51fa\u9519\u7684\u662f\uff0c\u76f4\u63a5\u8fdb\u884c\u8fd4\u56de\u3002'),(0,o.kt)("p",null,'"lib"\u4f5c\u4e3arust\u5de5\u7a0b\u7684\u57fa\u672c\u7ed3\u6784\u800c\u5b58\u5728\uff0c\u91cc\u9762\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e9b\u811a\u624b\u67b6\u5de5\u5177\u51fd\u6570\u3002'),(0,o.kt)("h2",{id:"\u5b9a\u4e49\u6307\u4ee4"},"\u5b9a\u4e49\u6307\u4ee4"),(0,o.kt)("p",null,"\u5728Rust\u4e2d\uff0c\u6211\u4eec\u5929\u7136\u7684\u53ef\u4ee5\u7528enum\u6765\u6a21\u62dfProtobuf\u4e2d\u7684Message\uff0c\u6216\u8005Oneof\u3002"),(0,o.kt)("p",null,'\u8fd9\u91cc\u6211\u4eec\u4e13\u95e8\u7528\u4e00\u4e2a"instruction.rs"\u6587\u4ef6\u6765\u5b9a\u4e49\u5404\u4e2a\u6307\u4ee4\uff0c\u7c7b\u4f3cpb\u6587\u4ef6\u5b9a\u4e49\u6d88\u606f\uff1a'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Instructions supported by the generic Name Registry program\n#[derive(Clone, Debug, BorshSerialize, BorshDeserialize, PartialEq)]\npub enum HelloWorldInstruction {\n    /// Greeting to a account\n    ///\n    /// Accounts expected by this instruction:\n    ///   0. `[writeable]` the account to greet\n    ///\n    Greeting {\n        /// greet count\n        counter: u32,\n    },\n}\n")),(0,o.kt)("p",null,'\u6bd4\u5982\u8fd9\u91cc\u5b9a\u4e49\u4e86"HelloWorldInstruction"\u6307\u4ee4\u96c6\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a "Greeting" \u6307\u4ee4\u3002 \u8fd9\u4e2a\u6307\u4ee4\u7684data\u90e8\u5206\u4e3a\u5305\u542b\u201ccounter\u201d\u6210\u5458\u7684struct\u3002'),(0,o.kt)("p",null,'\u56e0\u4e3a\u8fd9\u91cc\u901a\u8fc7derive\u6765\u9ed8\u8ba4\u5b9e\u73b0\u4e86Borsh\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u903b\u8f91\u3002\u5f53\u6211\u4eec\u8c03\u7528 "HelloWorldInstruction"\u7684 try_to_vec\u7684\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5e8f\u5217\u5316\u540e\u7684\u7ed3\u679c\u3002'),(0,o.kt)("p",null,"\u540c\u65f6\u5bf9\u4e8e\u6211\u4eec\u8fd9\u4e2a\u6307\u4ee4\uff0c\u8fd8\u6709\u914d\u5957\u4f7f\u7528\u7684Account\uff0c\u8981\u5c06\u4ed6\u4eec\u653e\u5165\u5230accounts\u6570\u7ec4\u4e2d\u3002"),(0,o.kt)("p",null,"\u56e0\u6b64\u5982\u679c\u8981\u5728Rust\u91cc\u9762\u6784\u9020\u8fd9\u6837\u7684\u4e00\u4e2a\u6307\u4ee4\uff08\u901a\u5e38\u5728\u7528Rust\u5199\u5408\u7ea6\u8c03\u7528\u7684\u65f6\u5019\uff09\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[allow(clippy::too_many_arguments)]\npub fn greeting(\n    helloworld_program_id: Pubkey,\n    instruction_data: HelloWorldInstruction,\n    name_greeting: Pubkey,\n) -> Result<Instruction, ProgramError> {\n    let data = instruction_data.try_to_vec().unwrap();\n    let mut accounts = vec![\n        AccountMeta::new(name_greeting, false),\n    ];\n\n\n    Ok(Instruction {\n        program_id: helloworld_program_id,\n        accounts,\n        data,\n    })\n}\n")),(0,o.kt)("p",null,"\u53ef\u4ee5\u8fd9\u6837\u6765\u5b9e\u73b0\uff0c\u5c06\u76f8\u5173\u7684AccountMeta push\u5230accounts\u90e8\u5206\u3002\u7136\u540e\u5c31\u6784\u5efa\u4e86\u4e00\u4e2aInstruction\u5bf9\u8c61\u3002"),(0,o.kt)("p",null,"\u8fd9\u4e2a\u4e00\u822c\u7528\u4e8e\u5728Rust\u8c03\u7528\u5408\u7ea6\uff0c\u6216\u8005\u5199\u5355\u5143\u6d4b\u8bd5\u7684\u65f6\u5019\u3002"),(0,o.kt)("h2",{id:"\u6307\u4ee4\u89e3\u6790"},"\u6307\u4ee4\u89e3\u6790"),(0,o.kt)("p",null,"\u4e0a\u9762\u6211\u4eec\u6784\u5efa\u4e86\u6307\u4ee4\uff0c\u5f53\u524d\u7aef\u8c03\u7528\u5408\u7ea6\u7684\u65f6\u5019\uff0cRPC\u4f1a\u8bb2\u76f8\u5e94\u7684\u503c\u8f6c\u6362\u6210\u8fd9\u91cc\u7684Instruction,\u90a3\u4e48\u6211\u4eec\u8981\u600e\u4e48\u53bb \u7406\u89e3\u4ed6\u5462\uff1f\u6309\u7167\u4e0a\u9762\u7684\u903b\u8f91\uff0c\u6211\u4eec\u6267\u884c\u53cd\u903b\u8f91\u5c31\u53ef\u4ee5\u4e86\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn process_instruction(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    instruction_data: &[u8],\n) -> ProgramResult {\n    msg!("Beginning processing");\n    let instruction = HelloWorldInstruction::try_from_slice(instruction_data)\n        .map_err(|_| ProgramError::InvalidInstructionData)?;\n    msg!("Instruction unpacked");\n\n    match instruction {\n        HelloWorldInstruction::Greeting {\n            counter,\n        } => {\n            msg!("Instruction: Greeting");\n            Processor::process_greeting(program_id, accounts, counter)?;\n        }\n    }\n    Ok(())\n}\n')),(0,o.kt)("p",null,"\u8fd9\u91cc\u5728\u5408\u7ea6\u5165\u53e3\u91cc\u9762\uff0c\u9996\u5148\u901a\u8fc7Borsh\u7684 try_from_slice \u65e2\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u6210\u5bf9\u5e94\u7684\u6307\u4ee4\u679a\u4e3e\u7ed3\u6784\u3002\u5bf9\u5e94\u5230\u8fd9\u91cc\u5c31\u662f \u6211\u4eec\u4e0a\u9762\u5b9a\u4e49\u7684HelloWorldInstruction\u3002"),(0,o.kt)("p",null,"\u7136\u540e\u901a\u8fc7match\u8bed\u6cd5\uff0c\u5c06\u5176\u4e00\u4e00\u5339\u914d\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"match instruction {\n    HelloWorldInstruction::Greeting {\n        counter,\n    } => todo!()\n}\n")),(0,o.kt)("p",null,"\u662f\u4e00\u4e2a\u89e3\u5305\u8bed\u6cd5\u7cd6\u3002\u610f\u601d\u5c31\u662f\u5c06enum\u4e2d\u5b9a\u4e49\u7684\u65e0\u540dstruct\u7684\u6210\u5458\u4e00\u4e00\u501f\u7528\u5230\u8fd9\u91cc\u7684\u548c\u6210\u5458\u540c\u540d\u7684\u53d8\u91cf\u3002\u65b9\u4fbf\u540e\u9762\u4f7f\u7528\u3002"),(0,o.kt)("h2",{id:"\u6267\u884c\u6307\u4ee4"},"\u6267\u884c\u6307\u4ee4"),(0,o.kt)("p",null,"\u5728\u4e0a\u9762\u7684\u89e3\u6790\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86accounts\u7684AccountMeta\u6570\u7ec4\uff0c\u4ee5\u53ca\u8981\u5904\u7406\u7684Create\u7684\u6307\u4ee4\u7684\u4e09\u4e2a\u6210\u5458\u53d8\u91cf\u3002"),(0,o.kt)("p",null,"\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u4ed6\u4eec\u4f20\u9012\u7ed9\u6211\u4eec\u8981\u5904\u7406\u7684\u903b\u8f91\uff0c\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49\u5904\u7406\u51fd\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn process_greeting(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    counter: u32,\n) -> ProgramResult\n")),(0,o.kt)("p",null,"\u8fd9\u91cc\u4f20\u5165\u5373\u4e3a\u4e0a\u9762\u89e3\u6790\u51fa\u6765\u7684\u5185\u5bb9\u3002\u610f\u4e49\u76f8\u5bf9\u660e\u786e\u3002\u5e76\u4e14\u8be5\u51fd\u6570\u8fd4\u56de\u4e86 ProgramResult\u7c7b\u578b\u3002"),(0,o.kt)("p",null,"\u5728\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"let accounts_iter = &mut accounts.iter();\n\nlet greeting_account = next_account_info(accounts_iter)?;\n")),(0,o.kt)("p",null,"\u7528next_account_info \u6765\u4f9d\u6b21\u53d6\u51faAccountInfo\u5bf9\u8c61\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct AccountInfo<'a> {\n    /// Public key of the account\n    pub key: &'a Pubkey,\n    /// The lamports in the account.  Modifiable by programs.\n    pub lamports: Rc<RefCell<&'a mut u64>>,\n    /// The data held in this account.  Modifiable by programs.\n    pub data: Rc<RefCell<&'a mut [u8]>>,\n    /// Program that owns this account\n    pub owner: &'a Pubkey,\n    /// The epoch at which this account will next owe rent\n    pub rent_epoch: Epoch,\n    /// Was the transaction signed by this account's public key?\n    pub is_signer: bool,\n    /// Is the account writable?\n    pub is_writable: bool,\n    /// This account's data contains a loaded program (and is now read-only)\n    pub executable: bool,\n}\n")),(0,o.kt)("p",null,"\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684is_signer/is_writeable/owner\u7b49\u505a\u4e00\u4e9b\u6821\u9a8c\u3002"),(0,o.kt)("p",null,"\u8fd9\u91cc\u6211\u4eec\u7684\u903b\u8f91\u4e2d\u8981\u4fee\u6539data\u90e8\u5206\u7684\u5185\u5bb9\u3002"),(0,o.kt)("h2",{id:"model\u5c42"},"Model\u5c42"),(0,o.kt)("p",null,"\u56e0\u4e3a\u8981\u4fee\u6539data\u90e8\u5206\uff0c\u800cdata\u90e8\u5206\u672c\u8d28\u4e0a\u662f\u4e00\u6bb5\u4e8c\u8fdb\u5236\u5185\u5bb9\u3002\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u7c7b\u540c\u6307\u4ee4\u90e8\u5206\u3002\u501f\u52a9Borsh\u505a\u5e8f\u5217\u5316\u3002 \u5c06\u7ed3\u6784\u5316\u6570\u636e\u5e8f\u5217\u5316\u6210\u4e00\u6bb5\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u5728\u5b58\u5165\u8fd9\u91cc\u7684data\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Define the type of state stored in accounts\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct GreetingInfo{\n    /// number of greetings\n    pub counter: u32,\n}\n")),(0,o.kt)("p",null,"\u5b9a\u4e49\u7684struct\u52a0\u4e0aBorshSerialize, BorshDeserialize \u7684derive\u5373\u53ef\u3002"),(0,o.kt)("p",null,"\u8fd9\u6837\u4fbf\u53ef\u4ee5\u8ddf\u6307\u4ee4\u90e8\u5206\u4e00\u6837\uff0c\u8c03\u7528try_from_slice \u505a\u53cd\u5e8f\u5217\u5316\uff0c\u5f97\u5230\u7ed3\u6784\u4f53\u7684\u5185\u5bb9\u3002 \u5728\u901a\u8fc7 serialize\u5c06\u5176\u5e8f\u5217\u5316\u5230&mut ","[u8]","\u8fd9\u6837\u7684buffer\u4e2d\u53bb\u3002\u901a\u8fc7\u5bf9data\u90e8\u5206\u505aborrow_mut \u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728process\u91cc\u9762\u589e\u52a0\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"// Increment and store the number of times the account has been greeted\nlet mut greeting_info= GreetingInfo::try_from_slice(&greeting_account.data.borrow())?;\ngreeting_info.counter += 1;\ngreeting_info.serialize(&mut *greeting_account.data.borrow_mut())?;\n")),(0,o.kt)("p",null,"\u5148\u5c06data\u90e8\u5206\u53cd\u5e8f\u5217\u5316\u51fa\u6765\uff0c\u4fee\u6539\u540e\uff0c\u5728\u5e8f\u5217\u5316\u5b58\u56de\u53bb\u3002"),(0,o.kt)("h2",{id:"\u5ba2\u6237\u7aef\u8bbf\u95ee"},"\u5ba2\u6237\u7aef\u8bbf\u95ee"),(0,o.kt)("p",null,"\u8fd9\u91cc\u8d34\u4e0a\u5ba2\u6237\u7aef\u793a\u4f8b\u4ee3\u7801\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// No imports needed: web3, borsh, pg and more are globally available\nimport { serialize, deserialize, deserializeUnchecked } from "borsh";\nimport { Buffer } from "buffer";\n/**\n * The state of a greeting account managed by the hello world program\n */\nclass GreetingAccount {\n  counter = 0;\n  constructor(fields: { counter: number } | undefined = undefined) {\n    if (fields) {\n      this.counter = fields.counter;\n    }\n  }\n}\n\n/**\n * Borsh schema definition for greeting accounts\n */\nconst GreetingSchema = new Map([\n  [GreetingAccount, { kind: "struct", fields: [["counter", "u32"]] }],\n]);\n\nclass Assignable {\n  constructor(properties) {\n    Object.keys(properties).map((key) => {\n      return (this[key] = properties[key]);\n    });\n  }\n}\n\n// Our instruction payload vocabulary\nclass HelloWorldInstruction extends Assignable {}\n\n// Borsh needs a schema describing the payload\nconst helloWorldInstructionSchema = new Map([\n  [\n    HelloWorldInstruction,\n    {\n      kind: "struct",\n      fields: [\n        ["id", "u8"],\n        ["counter", "u32"],\n      ],\n    },\n  ],\n]);\n\n// Instruction variant indexes\nenum InstructionVariant {\n  Greeting = 0,\n}\n\n/**\n * The expected size of each greeting account.\n */\nconst GREETING_SIZE = borsh.serialize(\n  GreetingSchema,\n  new GreetingAccount()\n).length;\n\n// Create greetings account instruction\nconst greetingAccountKp = new web3.Keypair();\nconst lamports = await pg.connection.getMinimumBalanceForRentExemption(\n  GREETING_SIZE\n);\nconst createGreetingAccountIx = web3.SystemProgram.createAccount({\n  fromPubkey: pg.wallet.publicKey,\n  lamports,\n  newAccountPubkey: greetingAccountKp.publicKey,\n  programId: pg.PROGRAM_ID,\n  space: GREETING_SIZE,\n});\n\nconst helloIx = new HelloWorldInstruction({\n  id: InstructionVariant.Greeting,\n  counter: 2,\n});\n\n// Serialize the payload\nconst helloSerBuf = Buffer.from(\n  serialize(helloWorldInstructionSchema, helloIx)\n);\n\n// Create greet instruction\nconst greetIx = new web3.TransactionInstruction({\n  data: helloSerBuf,\n  keys: [\n    {\n      pubkey: greetingAccountKp.publicKey,\n      isSigner: false,\n      isWritable: true,\n    },\n  ],\n  programId: pg.PROGRAM_ID,\n});\n\n// Create transaction and add the instructions\nconst tx = new web3.Transaction();\ntx.add(createGreetingAccountIx, greetIx);\n\n// Send and confirm the transaction\nconst txHash = await web3.sendAndConfirmTransaction(pg.connection, tx, [\n  pg.wallet.keypair,\n  greetingAccountKp,\n]);\nconsole.log(`Use \'solana confirm -v ${txHash}\' to see the logs`);\n\n// Fetch the greetings account\nconst greetingAccount = await pg.connection.getAccountInfo(\n  greetingAccountKp.publicKey\n);\n\n// Deserialize the account data\nconst deserializedAccountData = borsh.deserialize(\n  GreetingSchema,\n  GreetingAccount,\n  greetingAccount.data\n);\n\nconsole.log(\n  `deserializedAccountData.counter ${deserializedAccountData.counter}`\n);\n')))}g.isMDXComponent=!0}}]);